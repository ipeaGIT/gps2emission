% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transport_model.R
\name{transport_model}
\alias{transport_model}
\title{Transport model}
\usage{
transport_model(
  gtfs_data,
  output_path = NULL,
  min_speed = NULL,
  max_speed = NULL,
  new_speed = NULL,
  parallel = TRUE,
  spatial_resolution = 50
)
}
\arguments{
\item{gtfs_data}{A path to a GTFS file to be converted to GPS, or a GTFS data
represented organized as a list of \code{data.tables} created
with \code{gtfs2gps::read_gtfs()}.}

\item{output_path}{character. Filepath where the output will be saved. Note
that each public transport \code{shape_id} are saved separately
in different files. If \code{NULL} (Default), the function
returns the data to user.}

\item{min_speed}{numeric (in km/h) or a speed units value. Minimum speed to be considered as valid.
Values below minimum speed will be adjusted. Defaults to 2 km/h.}

\item{max_speed}{numeric (in km/h) or a speed units value. Maximum speed to be considered as valid.
Values above maximum speed will be adjusted. Defaults to 80 km/h.}

\item{new_speed}{numeric (in km/h) or a speed units value. Speed to replace missing values as well
as values outside min_speed and max_speed range. By default,
'new_speed = NULL' andthe function considers the mean speed of the entire gps data.}

\item{parallel}{logical. Decides whether the function should run in parallel.
Defaults to TRUE.}

\item{spatial_resolution}{numeric. The spatial resolution in meters.}
}
\value{
A \code{sf_linestring} object or \code{NULL}.
}
\description{
Creates the transport model based on a GTFS data input, and exports
in an \code{sf_linestring} format. Note that each public transport shape_id is saved
separately in a a different file. It has four main steps: i) Process the GTFS;
ii) Convert the data to a GPS-like data.table ; iii) Fix speeds;
iv) Convert GPS to sf_linestring format. These steps uses the functions of
gtfs2gps package 'read_gtfs', gtfs2gps', 'adjust_speed', and 'gps_as_sflinestring',
respectively.
}
\details{
If the user wants to process the all routes in the GTFS, we suggest
using the \code{output_path} argument because the output of the function
can be significantly large for public transport networks with many
routes. This function is a more friendly approach to generate the
transport model. For more advanced users, we recommend reading out
vignette at <\url{http://www.github.com/ipeaGIT/gtfs2emis/}>.
}
\examples{
if (interactive()) {
library(gtfs2emis)
library(gtfs2gps)
library(magrittr)

gtfs <- gtfs2gps::read_gtfs(system.file("extdata/poa.zip", package = "gtfs2gps")) \%>\% 
  gtfs2gps::filter_by_shape_id(., "T2-1") \%>\%
  gtfs2gps::filter_single_trip()

tp_model <- transport_model(gtfs_data = gtfs, parallel = TRUE)
}
}
