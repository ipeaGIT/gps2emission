[{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_emission_factor.html","id":"available-emission-factor-models","dir":"Articles","previous_headings":"","what":"Available emission factor models","title":"Exploring Emission Factors","text":"gtfs2emis package currently includes hot-exhaust emission factor data four environmental agencies. Reports detailed information methods emission factor data originally calculated can found agencies’ websites links Hot-exhaust emissions - Brazil, Environment Company Sao Paulo — [CETESB] - United States, Environmental Protection Agency — MOVES3 Model - United States, California Air Resources Board — EMFAC2017 model - Europe, European Environment Agency — EMEP-EEA Wear emissions (tire, brake road wear) - Europe, European Environment Agency — EMEP-EEA","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_emission_factor.html","id":"visualizing-emission-factor-data","dir":"Articles","previous_headings":"","what":"Visualizing emission factor data","title":"Exploring Emission Factors","text":"Emission fator values vary fleet characteristics — shown Defining Fleet data vignette. section use ef_europe_emep() function look three types urban buses (Midi, Standard Articulated) illustrate emissions vary according vehicle type, average speed, pollutant. case , function returns list contains relevant information emission factor — shown names(ef_europe). However, may useful check emission factor results data.frame graphic format. Plotting speed-dependent emission factors according vehicle type (veh_type) euro standard (euro).  situations emission factor available given input parameter. case ef_europe_emep() function, information vehicle technology match existing database, package displays message indicating technology considered. Please check message shown code block . case, users can either select existing data combining variables (euro, tech, veh_type, pollutant), accept assumed change vehicle technology. EF functions, ef_usa_emfac(), ef_usa_moves() ef_brazil_cetesb() work similar way. See functions documentation detail.","code":"#library(gtfs2emis) library(units) library(gtfs2emis) library(ggplot2)   ef_europe <- ef_europe_emep(speed = units::set_units(10:100,\"km/h\")                             ,veh_type = c(\"Ubus Midi <=15 t\"                                           ,\"Ubus Std 15 - 18 t\"                                           ,\"Ubus Artic >18 t\")                             ,euro = c(\"III\", \"IV\", \"V\")                             ,pollutant = c(\"PM10\", \"NOx\")                             ,fuel = c(\"D\", \"D\", \"D\")                             ,tech = c(\"-\", \"SCR\", \"SCR\")                             ,as_list = TRUE) names(ef_europe) #>  [1] \"pollutant\" \"veh_type\"  \"euro\"      \"fuel\"      \"tech\"      \"process\"   #>  [7] \"slope\"     \"load\"      \"speed\"     \"EF\" ef_europe_dt <- emis_to_dt(emi_list = ef_europe                            ,emi_vars = \"EF\"                            ,veh_vars = c(\"veh_type\",\"euro\",\"fuel\",\"tech\")                            ,pol_vars = \"pollutant\"                            ,segment_vars = c(\"slope\",\"load\",\"speed\")) head(ef_europe_dt) #>            veh_type   euro   fuel   tech pollutant               EF     process #>              <char> <char> <char> <char>    <char>          <units>      <char> #> 1: Ubus Midi <=15 t    III      D      -      PM10 0.2559070 [g/km] hot_exhaust #> 2: Ubus Midi <=15 t    III      D      -      PM10 0.2559070 [g/km] hot_exhaust #> 3: Ubus Midi <=15 t    III      D      -      PM10 0.2413421 [g/km] hot_exhaust #> 4: Ubus Midi <=15 t    III      D      -      PM10 0.2285624 [g/km] hot_exhaust #> 5: Ubus Midi <=15 t    III      D      -      PM10 0.2172637 [g/km] hot_exhaust #> 6: Ubus Midi <=15 t    III      D      -      PM10 0.2072074 [g/km] hot_exhaust #>    slope  load     speed #>    <num> <num>   <units> #> 1:     0   0.5 10 [km/h] #> 2:     0   0.5 11 [km/h] #> 3:     0   0.5 12 [km/h] #> 4:     0   0.5 13 [km/h] #> 5:     0   0.5 14 [km/h] #> 6:     0   0.5 15 [km/h] ef_europe_dt$name_fleet <- paste(ef_europe_dt$veh_type, \"/ Euro\"                                  , ef_europe_dt$euro)  # plot ggplot(ef_europe_dt) +    geom_line(aes(x = speed,y = EF,color = name_fleet))+   labs(color = \"Category / EURO\")+   facet_wrap(~pollutant,scales = \"free\")+   theme(legend.position = \"bottom\") #> Warning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2 #> 3.5.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. ef_europe_co2 <- ef_europe_emep(speed = units::set_units(10:100,\"km/h\")                                 ,veh_type = \"Ubus Std 15 - 18 t\"                                 ,euro = \"VI\",pollutant = \"CO2\"                                 ,tech = \"DPF+SCR\"                                 ,as_list = TRUE) #> 'CO2' Emission factor not found for 'DPF+SCR' Technology and Euro 'VI'. #>  The package assumed 'SCR' Technology entry. Please check `data(ef_europe_emep_db)` for available data."},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_emission_factor.html","id":"scaling-emission-factors-making-emission-factors-speed-dependent","dir":"Articles","previous_headings":"Visualizing emission factor data","what":"Scaling Emission Factors: making emission factors speed-dependent","title":"Exploring Emission Factors","text":"models (MOVES3, EMEP-EEA EMFAC2017), emission factors depend vehicle’s speed. However, emission factors developed Brazil CETESB (ef_brazil_cetesb()) vary vehicle speed. case, users can “scale” adjust local emission factor values make speed-dependent using function ef_scaled_euro(). using EMEP-EEA model reference, scaled emission factor varies according vehicle’s speed following expression: EFscaled(V)=EFlocal*EFeuro(V)EFeuro(SDC), EF_{scaled} (V) = EF_{local} * \\frac{EF_{euro}(V)}{EF_{euro}(SDC)},   EFscaled(V)EF_{scaled}(V) scaled emission factor street link, EFlocalEF_{local} local emission factor, EFeuro(V)EF_{euro}(V) EFeuro(SDC)EF_{euro}(SDC) EMEP/EEA emission factor speed V average urban driving speed SDC, respectively. scaled behavior EF can verified graphically plot EFlocalEF_{local}, EFscaled(V)EF_{scaled}(V), EFeuro(V)EF_{euro}(V) used reference plot data, need six quick steps: Build data.frame fleet indicating correspondence fleet characteristic local European emission models Estimate local emission factors Estimate ef_emep_europe Apply ef_scaled_euro() View ggplot2  case, scaled_EF value local_EF (dashed line) speed = 19 km/h, similar decaying behavior Euro_EF speed decreases.","code":"fleet_filepath <- system.file(\"extdata/bra_cur_fleet.txt\", package = \"gtfs2emis\") cur_fleet <- read.table(fleet_filepath,header = TRUE, sep = \",\", nrows = 1) cur_fleet #>   year euro shape_id type_name_br           veh_type total fuel #> 1 2006  III     1849  BUS_URBAN_D Ubus Std 15 - 18 t     2    D cur_local_ef <- ef_brazil_cetesb(pollutant = \"CO2\"                                  ,veh_type = cur_fleet$type_name_br                                  ,model_year = cur_fleet$year) head(cur_local_ef) #> $pollutant #> [1] \"CO2\" #>  #> $veh_type #> [1] \"BUS_URBAN_D\" #>  #> $model_year #> [1] 2006 #>  #> $EF #> Units: [g/km] #>      CO2_2006 #> [1,] 1385.626 #>  #> $process #> [1] \"hot_exhaust\"  # convert Local EF to data.frame cur_local_ef_dt <- emis_to_dt(emi_list = cur_local_ef                              ,emi_vars = \"EF\") # Euro EF cur_euro_ef <- ef_europe_emep(speed = units::set_units(10:100,\"km/h\")                               ,veh_type = cur_fleet$veh_type                               ,euro = cur_fleet$euro                               ,pollutant = \"CO2\"                               ,tech = \"-\" )  # convert to data.frame cur_euro_ef_dt <- emis_to_dt(emi_list = cur_euro_ef                              ,emi_vars = \"EF\"                              ,veh_vars = c(\"veh_type\",\"euro\",\"fuel\",\"tech\")                              ,segment_vars = \"speed\") cur_euro_ef_dt$source <- \"Euro EF\" cur_scaled_ef <- ef_scaled_euro(ef_local = cur_local_ef$EF                                 ,speed = units::set_units(10:100,\"km/h\")                                 ,veh_type = cur_fleet$veh_type                                 ,euro = cur_fleet$euro                                 ,pollutant = \"CO2\"                                 ,tech = \"-\"                                 ) # convert to data.frame cur_scaled_ef_dt <- emis_to_dt(emi_list = cur_scaled_ef                                ,emi_vars = \"EF\"                                ,veh_vars = c(\"veh_type\",\"euro\",\"fuel\",\"tech\")                                ,segment_vars = \"speed\") cur_scaled_ef_dt$source <- \"Scaled EF\" # rbind data cur_ef <- rbind(cur_euro_ef_dt, cur_scaled_ef_dt) cur_ef$source <- factor(cur_ef$source                         ,levels = c(\"Scaled EF\", \"Euro EF\"))  # plot ggplot() +    # add scaled and euro EF   geom_line(data = cur_ef             ,aes(x = speed,y = EF                  ,group = source,color = source))+   # add local EF   geom_hline(aes(yintercept = cur_local_ef_dt$EF)             ,colour = \"black\",linetype=\"dashed\") +    geom_point(aes(x = units::set_units(19,'km/h')                  ,y = cur_local_ef$EF)) +    # add local EF text   geom_text(aes(x = units::set_units(19,'km/h')                 , y = cur_local_ef_dt$EF)             ,label = sprintf('Local EF = %s g/km at 19 km/h',round(cur_local_ef_dt$EF,1))             ,hjust = 0,nudge_y = 100,nudge_x = 1             ,size = 3,fontface = 1)+   # configs plots   scale_color_manual(values=c(\"red\",\"blue\"))+   coord_cartesian(ylim = c(0,max(cur_scaled_ef_dt$EF)))+   labs(color = NULL)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_emission_factor.html","id":"checking-gtfs2emis-imported-data","dir":"Articles","previous_headings":"","what":"Checking gtfs2emis imported data","title":"Exploring Emission Factors","text":"Users can closer look hot-exhaust emission factor data included package using following functions: data(ef_brazil_cetesb) Environment Company Sao Paulo, Brazil (CETESB) data(ef_usa_moves) MOtor Vehicle Emission Simulator (MOVES) data(ef_usa_emfac) California Air Resources Board (EMFAC Model) data(ef_europe_emep) European Environment Agency (EMEP/EEA) data presented agencies website software downloaded pre-processed gtfs2emis easily read emission factor functions. Users can also access scripts used process raw data gtfs2emis GitHub repository.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_emission_factor.html","id":"learn-more","dir":"Articles","previous_headings":"","what":"Learn more","title":"Exploring Emission Factors","text":"Check extra guides: Exploring Non-Exhaust Emission Factors","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_emission_factor.html","id":"report-a-bug","dir":"Articles","previous_headings":"","what":"Report a bug","title":"Exploring Emission Factors","text":"suggestions want report error, please visit package GitHub page.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Preparing fleet data for gtfs2emis","text":"using gtfs2emis package estimate emission levels given public transport system, users required input data.frame characteristics public transport fleet, age vehicle type. vignette explains users can build input showing practical examples fleet data Brazilian, European, North American cities.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"simple-or-detailed-fleet-data-table","dir":"Articles","previous_headings":"","what":"2. Simple or detailed fleet data table","title":"Preparing fleet data for gtfs2emis","text":"first thing mind fleet data.frame can either: simple table overall composition fleet. case, gtfs2emis assume fleet homogeneously distributed across routes; detailed table brings info proportion vehicle type allocated transport route.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"example-of-simple-fleet-table","dir":"Articles","previous_headings":"2. Simple or detailed fleet data table","what":"Example of simple fleet table","title":"Preparing fleet data for gtfs2emis","text":"example simple fleet table tells us characteristics urban buses Dublin, Ireland. N fleet_composition columns tell us, respectively, absolute number proportion buses combination following characteristics: vehicle type, Euro standard, technology, fuel. Note sum(fleet_df$fleet_composition) equal 1.","code":"simple_fleet_file <- system.file(\"extdata/irl_dub_fleet.txt\", package = \"gtfs2emis\") simple_fleet_df <- read.csv(simple_fleet_file) head(simple_fleet_df) #>             veh_type euro fuel   N fleet_composition    tech #> 1 Ubus Std 15 - 18 t  III    D  10        0.00998004       - #> 2 Ubus Std 15 - 18 t   IV    D 296        0.29540918     SCR #> 3 Ubus Std 15 - 18 t    V    D 148        0.14770459     SCR #> 4 Ubus Std 15 - 18 t   VI    D 548        0.54690619 DPF+SCR"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"example-of-detailed-fleet-table","dir":"Articles","previous_headings":"2. Simple or detailed fleet data table","what":"Example of detailed fleet table","title":"Preparing fleet data for gtfs2emis","text":"table illustrates detailed fleet data table looks like, using example city Curitiba, Brazil. , N column also tells us absolute number buses combination vehicle characteristics. However, note table brings shape_id column. columns indicate specific vehicles allocated run predefined shape_ids GTFS data. example, allows users assign articulated buses specific routes transport network.","code":"detailed_fleet_file <- system.file(\"extdata/bra_cur_fleet.txt\", package = \"gtfs2emis\") detailed_fleet_df <- read.csv(detailed_fleet_file) head(detailed_fleet_df) #>   year euro shape_id type_name_br           veh_type total fuel #> 1 2006  III     1849  BUS_URBAN_D Ubus Std 15 - 18 t     2    D #> 2 2011  III     1849  BUS_URBAN_D Ubus Std 15 - 18 t     4    D #> 3 2018    V     1733  BUS_MICRO_D   Ubus Midi <=15 t     1    D #> 4 2011  III     1735  BUS_URBAN_D Ubus Std 15 - 18 t     3    D #> 5 2018    V     1735  BUS_MICRO_D   Ubus Midi <=15 t     2    D #> 6 2008  III     1735  BUS_MICRO_D   Ubus Midi <=15 t     2    D"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"fleet-characteristics-vary-by-emission-factor-model","dir":"Articles","previous_headings":"","what":"3. Fleet characteristics vary by emission factor model","title":"Preparing fleet data for gtfs2emis","text":"Please note columns fleet data table differ depending data requirements emission factor model user wants consider. example, emission factor models US cities (EMFAC2017 MOVES3), developed CARB EPA, require information type bus, fuel used, age vehicle. Meanwhile, EMEP model developed European Environment Agency requires much info, including vehicle type, Euro standard, technology, fuel. also allows users consider passenger load slope streets. check columns sets vehicle characteristics required emission factor model, user can read documentation emission factor functions listed table :","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"examples-of-fleet-data-tables","dir":"Articles","previous_headings":"","what":"4. Examples of fleet data tables","title":"Preparing fleet data for gtfs2emis","text":"Now examples data.frames fleet characteristics required different emission factor models. Note examples built simple fleet table includes fleet_composition, indicating proportion fleet represented vehicles characteristic.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"brazil-environmental-company-of-sao-paulo-cetesb","dir":"Articles","previous_headings":"4. Examples of fleet data tables","what":"4.1 Brazil: Environmental Company of Sao Paulo (CETESB):","title":"Preparing fleet data for gtfs2emis","text":"Based 2019 data emission factor model CETESB.","code":"fleet_data_ef_cetesb <- data.frame( veh_type = c(\"BUS_MICRO_D\", \"BUS_URBAN_D\", \"BUS_ARTIC_D\")                                   , model_year = c(2010, 2012, 2018)                                   , fuel = rep(\"D\", 3)                                   , fleet_composition = c(0.4, 0.4, 0.2)) fleet_data_ef_cetesb #>      veh_type model_year fuel fleet_composition #> 1 BUS_MICRO_D       2010    D               0.4 #> 2 BUS_URBAN_D       2012    D               0.4 #> 3 BUS_ARTIC_D       2018    D               0.2"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"europe-emep---european-environment-agency-eea","dir":"Articles","previous_headings":"4. Examples of fleet data tables","what":"4.2 Europe: EMEP - European Environment Agency (EEA)","title":"Preparing fleet data for gtfs2emis","text":"Based European Monitoring Evaluation Programme (EMEP), developed EEA.","code":"fleet_data_ef_europe <- data.frame(  veh_type = c(\"Ubus Midi <=15 t\"                                                   ,\"Ubus Std 15 - 18 t\"                                                   ,\"Ubus Artic >18 t\")                                    , euro = c(\"III\",\"IV\",\"V\")                                    , fuel = rep(\"D\",3)                                    , tech = c(\"-\",\"SCR\",\"SCR\")                                    , fleet_composition = c(0.4,0.5,0.1)) # fleet_data_ef_europe #>             veh_type euro fuel tech fleet_composition #> 1   Ubus Midi <=15 t  III    D    -               0.4 #> 2 Ubus Std 15 - 18 t   IV    D  SCR               0.5 #> 3   Ubus Artic >18 t    V    D  SCR               0.1"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"united-states-emfac2017---california-air-resources-board-carb","dir":"Articles","previous_headings":"4. Examples of fleet data tables","what":"4.3 United States: EMFAC2017 - California Air Resources Board (CARB)","title":"Preparing fleet data for gtfs2emis","text":"Based California Emission Factor model (EMFAC2017), developed CARB.","code":"fleet_data_ef_emfac <- data.frame(  veh_type = \"BUS_URBAN_D\"                                   , model_year = 2011:2015                                   , fuel = \"D\"                                   , calendar_year = 2019                                   , fleet_composition = rep(0.2,5)) fleet_data_ef_emfac #>      veh_type model_year fuel calendar_year fleet_composition #> 1 BUS_URBAN_D       2011    D          2019               0.2 #> 2 BUS_URBAN_D       2012    D          2019               0.2 #> 3 BUS_URBAN_D       2013    D          2019               0.2 #> 4 BUS_URBAN_D       2014    D          2019               0.2 #> 5 BUS_URBAN_D       2015    D          2019               0.2"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"united-states-moves3---environmental-protection-agency-epa","dir":"Articles","previous_headings":"4. Examples of fleet data tables","what":"4.4 United States: MOVES3 - Environmental Protection Agency (EPA)","title":"Preparing fleet data for gtfs2emis","text":"Based Motor Vehicle Emission Simulator (MOVES3 Model), developed EPA.","code":"fleet_data_ef_moves <- data.frame(  veh_type = \"BUS_URBAN_D\"                                   , model_year = 2011:2015                                   , fuel = \"D\"                                   , calendar_year = 2016                                   , fleet_composition = rep(0.2,5)) fleet_data_ef_moves #>      veh_type model_year fuel calendar_year fleet_composition #> 1 BUS_URBAN_D       2011    D          2016               0.2 #> 2 BUS_URBAN_D       2012    D          2016               0.2 #> 3 BUS_URBAN_D       2013    D          2016               0.2 #> 4 BUS_URBAN_D       2014    D          2016               0.2 #> 5 BUS_URBAN_D       2015    D          2016               0.2"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"learn-more","dir":"Articles","previous_headings":"4. Examples of fleet data tables","what":"Learn more","title":"Preparing fleet data for gtfs2emis","text":"Check extra guide: Exploring Emission Factors Exploring Non-Exhaust Emission Factors","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_fleet_data.html","id":"report-a-bug","dir":"Articles","previous_headings":"4. Examples of fleet data tables","what":"Report a bug","title":"Preparing fleet data for gtfs2emis","text":"suggestions want report error, please visit package GitHub page.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Getting started","text":"gtfs2emis R package estimate hot exhaust emissions public transport vehicles using data General Transit Feed Specification (GTFS) format. package allows users estimate emission levels several types pollutants public transport vehicle/trip/route high spatial temporal resolutions simply using GTFS feed information fleet characteristics. vignette introduces main functions gtfs2emis package shows step--step reproducible example use package.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"2. Installation","title":"Getting started","text":"One can install development version gtfs2emis Github: samples GTFS fleet files included package: Subset Curitiba (Brazil): bra_cur_gtfs.zip bra_cur_fleet.txt Subset Dublin (Ireland): irl_dub_gtfs.zip irl_dub_fleet.txt Subset Detroit (US): usa_det_gtfs.zip usa_det_fleet.txt","code":"library(devtools) # From CRAN install.packages(\"gtfs2emis\")  # Dev. version with latest features # install.packages(\"remotes\") remotes::install_github(\"ipeaGIT/gtfs2emis\") data_path <- system.file(\"extdata\", package = \"gtfs2emis\") list.files(data_path) #> [1] \"bra_cur_fleet.txt\" \"bra_cur_gtfs.zip\"  \"bra_cur-srtm.tif\"  #> [4] \"irl_dub_fleet.txt\" \"irl_dub_gtfs.zip\"  \"usa_det_fleet.txt\" #> [7] \"usa_det_gtfs.zip\""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"data-requirements","dir":"Articles","previous_headings":"","what":"3. Data requirements","title":"Getting started","text":"estimate emission levels given public transport system, users need : Input GTFS.zip file Input data.frame characteristics public transport fleet (age, vehicle type, fuel) Select emission factor model models provided package, currently includes models US, Europe, Brazil. Select pollutants estimated list 15 pollutants provided package.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"package-overview","dir":"Articles","previous_headings":"","what":"4. Package Overview","title":"Getting started","text":"start, let’s load packages ’ll using vignette: gtfs2emis package two core functions: transport_model(). function converts GTFS data GPS-like data.table space-time positions speeds public transport vehicles. result transport_model(); string indicating emission factor model considered; string indicating pollutants estimated; data.frame info fleet characteristics passed user. function returns list estimated amount pollutant emitted public transport vehicles. help users analyze output emission_model(), gtfs2emis package functions: emis_summary() aggregate emission estimates time day, vehicle type, road segment. emis_grid() spatially aggregate emission estimates using custom spatial grid polygons. emis_to_dt() convert output emission_model() list data.table.","code":"library(gtfs2emis) library(gtfstools) library(progressr) library(data.table) library(ggplot2) library(units) library(sf)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"demonstration-of-sample-data","dir":"Articles","previous_headings":"","what":"5. Demonstration of sample data","title":"Getting started","text":"introductory vignette, show simple case study using default parameters gtfs2emis package assume fleet characteristics homogeneously distributed across public transport routes. advanced users, written another vignette specifies usage different emissions factors. also written separate vignette help users build data.frame information fleet characteristics. demonstrate gtfs2emis package works, using small sample data city Dublin, Ireland. example, ’ll estimating NOx PM10 emissions bus services business days.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"transport-model","dir":"Articles","previous_headings":"5. Demonstration of sample data","what":"5.1 Transport model","title":"Getting started","text":"first step generate transport model using transport_model{gtfs2emis}. function converts GTFS data GPS-like data.table, transforming output sf-linestring, required input emissions estimates. user can input either string file path gtfs.zip file stored object class \"gtfs\" \"list\", generated gtfstools::read_gtfs(). First, let’s read GTFS data filter transport services run Now let’s generate transport model. time-consuming part. want , can set progress bar calling transport_model() function within progressr::with_progress(), shown . output transport model looks like. essence, ’s trajectory data.table sf linestring space-time position speed trip segments every single vehicle public transport system.","code":"# path to GTFS.zip file gtfs_file <- system.file(\"extdata/irl_dub_gtfs.zip\", package = \"gtfs2emis\")  # read GTFS gtfs <- gtfstools::read_gtfs(gtfs_file)  # Keep Monday services GTFS gtfs <- gtfstools::filter_by_weekday(gtfs,                                       weekday = c('saturday', 'sunday'),                                       keep = FALSE) # generate transport model progressr::with_progress(       tp_model <- transport_model(gtfs_data = gtfs,                               min_speed = 2,                               max_speed = 80,                               spatial_resolution = 100,                               parallel = TRUE)    )  head(tp_model) #> Simple feature collection with 6 features and 14 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -6.265914 ymin: 53.34591 xmax: -6.25602 ymax: 53.36229 #> Geodetic CRS:  WGS 84 #>         shape_id               trip_id route_type timestamp stop_sequence #> 1 60-1-b12-1.1.O 6264.2.60-1-b12-1.1.O          3  13:00:56            18 #> 2 60-1-b12-1.1.O 6264.2.60-1-b12-1.1.O          3  13:02:33            19 #> 3 60-1-b12-1.1.O 6264.2.60-1-b12-1.1.O          3  13:04:02            20 #> 4 60-1-b12-1.1.O 6264.2.60-1-b12-1.1.O          3  13:04:51            21 #> 5 60-1-b12-1.1.O 6264.2.60-1-b12-1.1.O          3  13:07:39            22 #> 6 60-1-b12-1.1.O 6264.2.60-1-b12-1.1.O          3  13:10:01            23 #>             speed           dist       cumdist       cumtime trip_number #> 1 10.64075 [km/h] 0.2863887 [km]  286.3887 [m]  96.89161 [s]           1 #> 2 11.75273 [km/h] 0.2902288 [km]  576.6176 [m] 185.79216 [s]           1 #> 3 11.53012 [km/h] 0.1567624 [km]  733.3799 [m] 234.73741 [s]           1 #> 4 12.19731 [km/h] 0.5685717 [km] 1301.9517 [m] 402.54968 [s]           1 #> 5 14.19114 [km/h] 0.5591361 [km] 1861.0878 [m] 544.39101 [s]           1 #> 6 11.48546 [km/h] 0.4270367 [km] 2288.1245 [m] 678.24128 [s]           1 #>   from_stop_id   to_stop_id from_timestamp to_timestamp #> 1 8220DB000048 8220DB000049       13:00:56     13:02:33 #> 2 8220DB000049 8220DB000051       13:02:33     13:04:02 #> 3 8220DB000051 8220DB000052       13:04:02     13:04:51 #> 4 8220DB000052 8220DB000265       13:04:51     13:07:39 #> 5 8220DB000265 8220DB000271       13:07:39     13:10:01 #> 6 8220DB000271 8220DB000340       13:10:01     13:12:15 #>                         geometry #> 1 LINESTRING (-6.258882 53.36... #> 2 LINESTRING (-6.260943 53.36... #> 3 LINESTRING (-6.263389 53.35... #> 4 LINESTRING (-6.26464 53.356... #> 5 LINESTRING (-6.262147 53.35... #> 6 LINESTRING (-6.25953 53.348... ggplot(data = tp_model) +   geom_sf(aes(color= as.numeric(speed))) +   scale_color_continuous(type = \"viridis\")+   labs(color = \"Speed (km/h)\")+   theme_void()"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"fleet-data","dir":"Articles","previous_headings":"5. Demonstration of sample data","what":"5.2 Fleet data","title":"Getting started","text":"next step prepare data.frame characteristics public transport fleet. can either: - simple table overall composition fleet. case, gtfs2emis assume fleet homogeneously distributed across routes; - detailed table (1) brings info characteristics vehicle , (2) tells probability vehicle type allocated transport route. introductory vignette, ’ll working simple table tells us proportion buses Dublin according vehicle type, Euro standard, technology, fuel. table looks like : Please note different emission factor models may require different information fleet data.frame needs organized accordingly. current example city Dublin, fleet data must include certain columns fleet characteristics used EMEP-EEA emission factor model: vehicle type, Euro standard, technology, fuel. check columns sets vehicle characteristics required given emission factor model, check fleet data vignette.","code":"fleet_file <- system.file(\"extdata/irl_dub_fleet.txt\", package = \"gtfs2emis\") fleet_df <- read.csv(fleet_file) head(fleet_df) #>             veh_type euro fuel   N fleet_composition    tech #> 1 Ubus Std 15 - 18 t  III    D  10        0.00998004       - #> 2 Ubus Std 15 - 18 t   IV    D 296        0.29540918     SCR #> 3 Ubus Std 15 - 18 t    V    D 148        0.14770459     SCR #> 4 Ubus Std 15 - 18 t   VI    D 548        0.54690619 DPF+SCR"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"emission-model","dir":"Articles","previous_headings":"5. Demonstration of sample data","what":"5.3 Emission model","title":"Getting started","text":"final step, use emission_model{gtfs2emis} function estimate hot exhaust emissions public transport system. , user needs pass results transport_model(), fleet data described , select emission factor model pollutants considered. emission_model() outputs list several vectors data.frames emission estimates related information vehicle variables (fuel, age, tech, euro, fleet_composition), travel variables (slope, load, gps) pollution (EF, emi).","code":"emi_list <- emission_model(tp_model = tp_model,                            ef_model = \"ef_europe_emep\",                            fleet_data = fleet_df,                            pollutant = c(\"CO2\",\"PM10\"),                            reference_year = 2020                            )  names(emi_list) #>  [1] \"pollutant\"         \"veh_type\"          \"euro\"              #>  [4] \"fuel\"              \"tech\"              \"process\"           #>  [7] \"slope\"             \"load\"              \"speed\"             #> [10] \"EF\"                \"emi\"               \"tp_model\"          #> [13] \"fleet_composition\""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"analyzing-emission-estimates","dir":"Articles","previous_headings":"","what":"6 Analyzing emission estimates","title":"Getting started","text":"Sometimes, working data stored long list can tricky. convenience, gtfs2emis package functions help users analyze results emission estimates. example, can use emis_to_dt() function convert output emission_model() list data.table format: Alternatively, emis_summary() function helps users summarize emission estimates, aggregating emissions pollutant, time day, vehicle road segment (spatial).","code":"emi_dt <- emis_to_dt(emi_list = emi_list,                      veh_vars = c(\"veh_type\", \"euro\", \"fuel\"),                      pol_vars = \"pollutant\"                      )  head(emi_dt)  #>              veh_type   euro   fuel pollutant          emi     process #>                <char> <char> <char>    <char>      <units>      <char> #> 1: Ubus Std 15 - 18 t    III      D       CO2 4.465969 [g] hot_exhaust #> 2: Ubus Std 15 - 18 t    III      D       CO2 4.350602 [g] hot_exhaust #> 3: Ubus Std 15 - 18 t    III      D       CO2 2.349907 [g] hot_exhaust #> 4: Ubus Std 15 - 18 t    III      D       CO2 8.523031 [g] hot_exhaust #> 5: Ubus Std 15 - 18 t    III      D       CO2 7.769610 [g] hot_exhaust #> 6: Ubus Std 15 - 18 t    III      D       CO2 6.659245 [g] hot_exhaust"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"total-emissions-by-pollutant","dir":"Articles","previous_headings":"6 Analyzing emission estimates","what":"6.1 Total emissions by pollutant","title":"Getting started","text":"","code":"emi_by_pol <- emis_summary(emi_list = emi_list,                                  by = \"pollutant\")  emi_by_pol #>    pollutant     process              emi #>       <char>      <char>          <units> #> 1:       CO2 hot_exhaust 2.685654e+06 [g] #> 2:      PM10 hot_exhaust 8.732673e+01 [g]"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"total-emissions-by-vehicle-type","dir":"Articles","previous_headings":"6 Analyzing emission estimates","what":"6.2 Total emissions by vehicle type","title":"Getting started","text":"emis_summary() function help users summarize emission estimates either veh_type, pollutant, time. Using function, users can easily: also possible summarize emission estimates vehicle characteristics pollutants.","code":"emi_by_veh <- emis_summary(emi_list = emi_list,                           by = \"vehicle\")  head(emi_by_veh) #>              veh_type pollutant     process              emi #>                <char>    <char>      <char>          <units> #> 1: Ubus Std 15 - 18 t       CO2 hot_exhaust 2.685654e+06 [g] #> 2: Ubus Std 15 - 18 t      PM10 hot_exhaust 8.732673e+01 [g] emi_by_veh <- emis_summary(emi_list = emi_list,                           by = \"vehicle\",                           veh_vars = c(\"veh_type\",\"euro\"))  head(emi_by_veh) #>              veh_type   euro pollutant     process              emi #>                <char> <char>    <char>      <char>          <units> #> 1: Ubus Std 15 - 18 t    III       CO2 hot_exhaust 3.124742e+04 [g] #> 2: Ubus Std 15 - 18 t     IV       CO2 hot_exhaust 8.889753e+05 [g] #> 3: Ubus Std 15 - 18 t      V       CO2 hot_exhaust 3.637575e+05 [g] #> 4: Ubus Std 15 - 18 t     VI       CO2 hot_exhaust 1.401674e+06 [g] #> 5: Ubus Std 15 - 18 t    III      PM10 hot_exhaust 6.369830e+00 [g] #> 6: Ubus Std 15 - 18 t     IV      PM10 hot_exhaust 4.237565e+01 [g]  # plot ggplot(data = emi_by_veh) +   geom_col(aes(x = euro, y = as.numeric(emi/1000), fill = pollutant),             color=NA, show.legend = FALSE) +   labs(y=\"Total emissions (Kg)\", x=\"Euro standard\") +   facet_wrap(~pollutant, scales = \"free\", nrow = 2) +   theme_minimal()"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"total-emissions-by-time-of-the-day","dir":"Articles","previous_headings":"6 Analyzing emission estimates","what":"6.3 Total emissions by time of the day","title":"Getting started","text":"","code":"emi_by_time <- emis_summary(emi_list = emi_list,                                 by = \"time\")  head(emi_by_time)  #>    timestamp_hour pollutant     process          emi #>             <int>    <char>      <char>      <units> #> 1:             13       CO2 hot_exhaust 197791.4 [g] #> 2:             14       CO2 hot_exhaust 235187.9 [g] #> 3:             15       CO2 hot_exhaust 219913.4 [g] #> 4:             16       CO2 hot_exhaust 225923.6 [g] #> 5:             17       CO2 hot_exhaust 318723.4 [g] #> 6:             18       CO2 hot_exhaust 209437.0 [g]  # plot ggplot(data = emi_by_time) +   geom_col(aes(x = factor(timestamp_hour), y = as.numeric(emi/1000), fill = pollutant),            color=NA, show.legend = FALSE) +   labs(y=\"Total emissions (Kg)\", x=\"Hour of the day\") +   facet_wrap(~pollutant, scales = \"free\", nrow = 2) +    theme_minimal()"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"spatial-distribution-of-emissions","dir":"Articles","previous_headings":"6 Analyzing emission estimates","what":"6.4 Spatial distribution of emissions","title":"Getting started","text":"Finally, users can analyze public transport emissions spatially distributed. , emis_grid() function helps aggregate emission estimates custom spatial vector data (sf POLYGON). Let’s create regular hexagonal grid example.","code":"# create spatial grid mygrid <- sf::st_make_grid(   x = sf::st_make_valid(emi_list$tp_model)   , cellsize = 0.25 / 200   , crs= 4326   , what = \"polygons\"   , square = FALSE)   ggplot() +     geom_sf(data=mygrid) +    theme_void() mygrid_emi <- emis_grid(emi_list, mygrid,time_resolution = \"day\"                         ,quiet = FALSE)  ggplot() +   geom_sf(data = mygrid_emi, aes(fill= as.numeric(CO2_Euro_III)), color=NA) +   geom_sf(data = emi_list$tp_model$geometry,color = \"black\")+ scale_fill_continuous(type = \"viridis\")+   labs(fill = \"CO2 (g)\")+   theme_void()"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_intro_vignette.html","id":"learn-more","dir":"Articles","previous_headings":"6 Analyzing emission estimates","what":"Learn more","title":"Getting started","text":"Check extra guides: Defining Fleet data Exploring Emission Factors Exploring Non-Exhaust Emission Factors ## Report bug suggestions want report error, please visit package GitHub page.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"tire","dir":"Articles","previous_headings":"","what":"Tire","title":"Exploring Non-Exhaust Emission Factors","text":"case heavy-duty vehicles, emission factor needs incorporation vehicle size, determined number axles, load. parameters introduced equation follows: EFTSPtirehdv=0.5×Naxle×LCFtire×EFTSPtirepcEFTSP^{hdv}_{tire} = 0.5 \\times N_{axle} \\times LCF_{tire} \\times EFTSP^{pc}_{tire} : EFTSPtirehdvEFTSP^{hdv}_{tire} = TSP emission factor tire wear heavy-duty vehicles (g/km), NaxleN_{axle} = number vehicle axles (-), LCFtireLCF_{tire} = load correction factor tire wear (-), EFTSPtirepcEFTSP^{pc}_{tire} = TSP emission factor tire wear passenger car vehicles (g/km). LCFtire=1.41+(1.38×LF)LCF_{tire} = 1.41 + (1.38 \\times LF) : LFLF = load factor (-), ranging 0 empty bus 1 fully laden one. function considers following look-table number vehicle axes: size distribution tire wear particles given : Finally, speed correction : SCtire(speed)=1.39SC_{tire}(speed) = 1.39, speed<40km/hspeed < 40 km/h; SCtire(speed)=−0.00974×speed+1.78SC_{tire}(speed) = -0.00974 \\times speed + 1.78, 40<=speed<=90km/h40 <= speed <= 90 km/h; SCtire(speed)=0.902SC_{tire}(speed) = 0.902, speed>90km/hspeed > 90 km/h.","code":"library(gtfs2emis) emi_europe_emep_wear(dist = units::set_units(1,\"km\"),                               speed =  units::set_units(30,\"km/h\"),                               pollutant = c(\"PM10\",\"TSP\",\"PM2.5\"),                               veh_type = \"Ubus Std 15 - 18 t\",                               fleet_composition = 1,                               load = 0.5,                               process = c(\"tyre\"),                               as_list = TRUE) #> $pollutant #> [1] \"PM10\"  \"TSP\"   \"PM2.5\" #>  #> $veh_type #> [1] \"Ubus Std 15 - 18 t\" #>  #> $fleet_composition #> [1] 1 #>  #> $speed #> 30 [km/h] #>  #> $dist #> 1 [km] #>  #> $emi #>    PM10_tyre_veh_1 TSP_tyre_veh_1 PM2.5_tyre_veh_1 #>            <units>        <units>          <units> #> 1:  0.01873998 [g]  0.0312333 [g]   0.01311799 [g] #>  #> $process #> [1] \"tyre\""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"brake","dir":"Articles","previous_headings":"","what":"Brake","title":"Exploring Non-Exhaust Emission Factors","text":"heavy-duty vehicle emission factor derived modifying passenger car emission factor conform experimental data obtained heavy-duty vehicles. EFTSPbrakehdv=1.956×LCFbrake×EFTSPbrakepcEFTSP^{hdv}_{brake} = 1.956 \\times LCF_{brake} \\times EFTSP^{pc}_{brake} : EFTSPbrakehdvEFTSP^{hdv}_{brake} = heavy-duty vehicle emission factor TSP, LCFbrakeLCF_{brake} = load correction factor brake wear, EFTSPbrakepcEFTSP^{pc}_{brake} = passenger car emission factor TSP. LCFbrake=1+(0.79×LF),LCF_{brake} = 1 + (0.79 \\times LF), : LFLF = load factor (-), ranging 0 empty bus 1 fully laden one. size distribution brake wear particles given : Finally, speed correction : SCbrake(speed)=1.67SC_{brake}(speed) = 1.67, speed<40km/hspeed < 40 km/h; SCbrake(speed)=−0.0270×speed+2.75SC_{brake}(speed) = -0.0270 \\times speed + 2.75, 40<=speed<=95km/h40 <= speed <= 95 km/h; SCbrake(speed)=0.185SC_{brake}(speed) = 0.185, speed>95km/hspeed > 95 km/h.","code":"emi_europe_emep_wear(dist = units::set_units(1,\"km\"),                               speed =  units::set_units(30,\"km/h\"),                               pollutant = c(\"PM10\",\"TSP\",\"PM2.5\"),                               veh_type = \"Ubus Std 15 - 18 t\",                               fleet_composition = 1,                               load = 0.5,                               process = c(\"brake\"),                               as_list = TRUE) #> $pollutant #> [1] \"PM10\"  \"TSP\"   \"PM2.5\" #>  #> $veh_type #> [1] \"Ubus Std 15 - 18 t\" #>  #> $fleet_composition #> [1] 1 #>  #> $speed #> 30 [km/h] #>  #> $dist #> 1 [km] #>  #> $emi #>    PM10_brake_veh_1 TSP_brake_veh_1 PM2.5_brake_veh_1 #>             <units>         <units>           <units> #> 1:   0.03349245 [g]  0.03417597 [g]    0.01332863 [g] #>  #> $process #> [1] \"brake\""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"road-wear","dir":"Articles","previous_headings":"","what":"Road Wear","title":"Exploring Non-Exhaust Emission Factors","text":"Emissions calculated according equation: TE()=dist×EFtsproad(j)×mfroadTE() = dist \\times EF^{road}_{tsp}(j) \\times mf_{road} : TE()TE() = total emissions pollutant (g), distdist = total distance driven vehicles category j (km), EFtsproadEF^{road}_{tsp} = TSP mass emission factor road wear vehicles j (0.0760 g/km), mfroadmf_{road} = mass fraction TSP can attributed particle size class (-). following table shows size distribution road surface wear particles","code":"emi_europe_emep_wear(dist = units::set_units(1,\"km\"),                               speed =  units::set_units(30,\"km/h\"),                               pollutant = c(\"PM10\",\"TSP\",\"PM2.5\"),                               veh_type = \"Ubus Std 15 - 18 t\",                               fleet_composition = 1,                               load = 0.5,                               process = c(\"road\"),                               as_list = TRUE) #> $pollutant #> [1] \"PM10\"  \"TSP\"   \"PM2.5\" #>  #> $veh_type #> [1] \"Ubus Std 15 - 18 t\" #>  #> $fleet_composition #> [1] 1 #>  #> $speed #> 30 [km/h] #>  #> $dist #> 1 [km] #>  #> $emi #>    PM10_road_veh_1 TSP_road_veh_1 PM2.5_road_veh_1 #>            <units>        <units>          <units> #> 1:       0.038 [g]      0.076 [g]      0.02052 [g] #>  #> $process #> [1] \"road\""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"viewing-emissions","dir":"Articles","previous_headings":"","what":"Viewing Emissions","title":"Exploring Non-Exhaust Emission Factors","text":"Users can also use one single function apply one process (e.g. tire, brake road), shown .  using transport_model() output, users can also visualize hot-exhaust non-exhaust emissions taking steps. can done three main stages: ) Preparing data, b) Creating spatial grid; c) Generating spatial temporal visualizations.","code":"library(units) library(ggplot2)  emis_list <- emi_europe_emep_wear(dist = units::set_units(rep(1,100),\"km\"),                      speed =  units::set_units(1:100,\"km/h\"),                      pollutant = c(\"PM10\",\"TSP\",\"PM2.5\"),                      veh_type = c(\"Ubus Std 15 - 18 t\"),                      fleet_composition = c(1),                      load = 0.5,                      process = c(\"brake\",\"tyre\",\"road\"),                      as_list = TRUE) ef_dt <- gtfs2emis::emis_to_dt(emis_list,emi_vars = \"emi\"                                ,segment_vars = \"speed\") ggplot(ef_dt)+   geom_line(aes(x = as.numeric(speed),y = as.numeric(emi),color = pollutant))+   facet_wrap(facets = vars(process))+   labs(x = \"Speed (km/h)\",y = \"Emissions (g)\")+   theme_minimal()"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"a-preparing-the-data","dir":"Articles","previous_headings":"Viewing Emissions","what":"a) Preparing the data","title":"Exploring Non-Exhaust Emission Factors","text":"","code":"library(gtfstools) library(sf)  # read GTFS gtfs_file <- system.file(\"extdata/bra_cur_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)   # keep a single trip_id to speed up this example gtfs_small <- gtfstools::filter_by_trip_id(gtfs, trip_id =\"4451136\")  # run transport model tp_model <- transport_model(gtfs_data = gtfs_small,                             spatial_resolution = 100,                             parallel = FALSE)  # Fleet data, using Brazilian emission model and fleet fleet_data_ef_emep <- data.frame(veh_type = \"Ubus Std 15 - 18 t\",                                  fleet_composition = 1,                                  euro = \"V\",   # for hot-exhaust emissions                                   fuel = \"D\",   # for hot-exhaust emissions                                   tech = \"SCR\") # for hot-exhaust emissions  # Emission model (hot-exhaust) emi_list_he <- emission_model(   tp_model = tp_model,   ef_model = \"ef_europe_emep\",   fleet_data = fleet_data_ef_emep,   pollutant = \"PM10\" )  # Emission model (non-exhaust) emi_list_ne <- emi_europe_emep_wear(   dist = tp_model$dist,   speed = tp_model$speed,   pollutant = \"PM10\",   veh_type = c(\"Ubus Std 15 - 18 t\"),   fleet_composition = c(1),   load = 0.5,   process = c(\"brake\",\"tyre\",\"road\"),   as_list = TRUE)  emi_list_ne$tp_model <- tp_model"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"b-creating-spatial-grid","dir":"Articles","previous_headings":"Viewing Emissions","what":"b) Creating spatial grid","title":"Exploring Non-Exhaust Emission Factors","text":"","code":"# create spatial grid grid <- sf::st_make_grid(   x = sf::st_make_valid(tp_model)   , cellsize = 0.25 / 200   , crs= 4326   , what = \"polygons\"   , square = FALSE )  # grid (hot-exhaust) emi_grid_he <- emis_grid( emi_list_he,grid,time_resolution = 'day'                           ,aggregate = TRUE) setDT(emi_grid_he) pol_names <- setdiff(names(emi_grid_he),\"geometry\") emi_grid_he_dt <- melt(emi_grid_he,measure.vars = pol_names,id.vars = \"geometry\") emi_grid_he_dt <- sf::st_as_sf(emi_grid_he_dt)  # grid (non-exhaust) emi_grid_ne <- emis_grid( emi_list_ne,grid,time_resolution = 'day'                        ,aggregate = TRUE) setDT(emi_grid_ne) pol_names <- setdiff(names(emi_grid_ne),\"geometry\") emi_grid_ne_dt <- melt(emi_grid_ne,measure.vars = pol_names,id.vars = \"geometry\") emi_grid_ne_dt <- sf::st_as_sf(emi_grid_ne_dt)  # bind grid emi_grid_dt <- data.table::rbindlist(l = list(emi_grid_he_dt,emi_grid_ne_dt)) emi_grid_sf  <- sf::st_as_sf(emi_grid_dt)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"c-generating-spatial-and-temporal-patterns","dir":"Articles","previous_headings":"Viewing Emissions","what":"c) Generating spatial and temporal patterns","title":"Exploring Non-Exhaust Emission Factors","text":"total emissions can also viewed bar graphics","code":"# plot library(ggplot2)  ggplot(emi_grid_sf) +   geom_sf(aes(fill= as.numeric(value)), color=NA) +   geom_sf(data = tp_model$geometry,color = \"black\")+   scale_fill_continuous(type = \"viridis\")+   labs(fill = \"PM10 (g)\")+   facet_wrap(facets = vars(variable),nrow = 1)+   theme_void() # Emissions by time emi_time_he <- emis_summary(emi_list_he,by = \"time\") emi_time_ne <- emis_summary(emi_list_ne,by = \"time\")  emi_time <- data.table::rbindlist(l = list(emi_time_he,emi_time_ne))  ggplot(emi_time)+   geom_col(aes(x = process,y = as.numeric(emi),fill = as.numeric(emi)))+   scale_fill_continuous(type = \"viridis\")+   labs(fill = \"PM10 level\",y = \"Emissions (g)\")+   theme_minimal()"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Exploring Non-Exhaust Emission Factors","text":"EMEP/EEA data reports can accessed following links: 2019 edition EMEP-EEA.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/articles/gtfs2emis_non_exhaust_ef.html","id":"report-a-bug","dir":"Articles","previous_headings":"","what":"Report a bug","title":"Exploring Non-Exhaust Emission Factors","text":"suggestions want report error, please visit package GitHub page.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joao Bazzo. Author, maintainer. Rafael H. M. Pereira. Author. Pedro R. Andrade. Author. Sergio Ibarra-Espinosa. Contributor. Ipea - Institute Applied Economic Research. Copyright holder, funder.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vieira, J. P. B., Pereira, R. H. M., & Andrade, P. R. (2023). Estimating Public Transport Emissions General Transit Feed Specification Data. Transportation Research Part D: Transport Environment. Volume 119, 103757. https://doi.org/10.1016/j.trd.2023.103757","code":"@Article{,   title = {Estimating Public Transport Emissions from General Transit Feed Specification Data},   author = {João Pedro Bazzo and Rafael H. M. Pereira and Pedro R. Andrade},   journal = {Transportation Research Part D: Transport and Environment},   year = {2023},   volume = {119},   doi = {10.1016/j.trd.2023.103757},   url = {https://doi.org/10.1016/j.trd.2023.103757},   issn = {1361-9209}, }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"gtfs2emis-estimating-public-transport-emissions-from-gtfs-data-","dir":"","previous_headings":"","what":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"gtfs2emis R package estimate emission levels public transport vehicles based General Transit Feed Specification (GTFS) data. package requires two main inputs: ) public transport data GTFS standard format; ii) basic information fleet characteristics vehicle age, technology, fuel, Euro stage. stands, package estimates several pollutants (see table ) high spatial temporal resolutions. Pollution levels can calculated specific transport routes, trips, time day, transport system whole. output emission estimates can extracted different formats, supporting analysis emission levels vary across space, time, fleet characteristics. full description methods used gtfs2emis model presented Vieira, Pereira Andrade (2022).","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"can install gtfs2emis:","code":"# From CRAN install.packages(\"gtfs2emis\") library(gtfs2emis)  # or use the development version with latest features utils::remove.packages('gtfs2emis') devtools::install_github(\"ipeaGIT/gtfs2emis\") library(gtfs2emis)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"usage-and-data-requirements","dir":"","previous_headings":"","what":"Usage and Data requirements","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"gtfs2emis package two core functions. transport_model() converts GTFS data GPS-like table space-time positions speeds public transport vehicles. input required GTFS.zip feed. emission_model() estimates hot-exhaust emissions based four inputs: result transport_model(); data.frame info fleet characteristics; string indicating emission factor model considered; string indicating pollutants estimated. help users analyze output emission_model(), gtfs2emis package functions: emis_to_dt() convert output emission_model() list data.table. emis_summary() aggregate emission estimates time day, vehicle type, road segment. emis_grid() spatially aggregate emission estimates using custom spatial grid polygons.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"demonstration-on-sample-data","dir":"","previous_headings":"","what":"Demonstration on sample data","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"illustrate functionality, package includes small sample data sets public transport fleet Curitiba (Brazil), Detroit (USA), Dublin (Ireland). Estimating emissions given public transport system using gtfs2emis can done three simple steps, follows.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"id_1-run-transport-model","dir":"","previous_headings":"Demonstration on sample data","what":"1. Run transport model","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"first step use transport_model() function convert GTFS data GPS-like table, can get space-time position speed vehicle public transport system high spatial temporal resolutions.","code":"# read GTFS.zip gtfs_file <- system.file(\"extdata/irl_dub_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)  # generate transport model tp_model <- transport_model(gtfs_data = gtfs,spatial_resolution = 100,parallel = TRUE)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"id_2-prepare-fleet-data","dir":"","previous_headings":"Demonstration on sample data","what":"2. Prepare fleet data","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"second step prepare data.frame characteristics public transport fleet. Note different emission factor models may require information different fleet characteristics, vehicle age, type, Euro standard, technology, fuel. can either: - simple table overall composition fleet. case, gtfs2emis assume fleet homogeneously distributed across routes; - detailed table (1) brings info characteristics vehicle , (2) tells probability vehicle type allocated transport route. simple fleet table used EMEP-EEA emission factor model looks like:","code":"fleet_file <- system.file(\"extdata/irl_dub_fleet.txt\", package = \"gtfs2emis\")  fleet_df <- read.csv(fleet_file) fleet_df #>             veh_type euro fuel   N fleet_composition    tech #> 1 Ubus Std 15 - 18 t  III    D  10        0.00998004       - #> 2 Ubus Std 15 - 18 t   IV    D 296        0.29540918     SCR #> 3 Ubus Std 15 - 18 t    V    D 148        0.14770459     SCR #> 4 Ubus Std 15 - 18 t   VI    D 548        0.54690619 DPF+SCR"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"id_3-run-emission-model","dir":"","previous_headings":"Demonstration on sample data","what":"3. Run emission model","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"final step, emission_model() function estimate hot exhaust emissions public transport system. , user needs pass results transport_model(), fleet data described , select emission factor model pollutants considered (see options available ). output emission_model() list several vectors data.frames emission estimates related information vehicle variables (fuel, age, tech, euro, fleet_composition), travel variables (slope, load, gps) pollution (EF, emi).","code":"emi_list <- emission_model(tp_model = tp_model , ef_model = \"ef_europe_emep\" , fleet_data = fleet_df , pollutant = c(\"NOx\",\"PM10\") )  names(emi_list) #>  [1] \"pollutant\"         \"veh_type\"          \"euro\"              #>  [4] \"fuel\"              \"tech\"              \"slope\"             #>  [7] \"load\"              \"speed\"             \"EF\"                #> [10] \"emi\"               \"fleet_composition\" \"tp_model\""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"emission-factor-models-and-pollutants-available","dir":"","previous_headings":"","what":"Emission factor models and pollutants available","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"Currently, gtfs2emis package provides computational method estimate running exhaust emissions factors based following emission factor models: CETESB: 2019 model Environmental Company Sao Paulo (CETESB) EMEP/EEA: European Monitoring Evaluation Programme, developed European Environment Agency (EEA). EMFAC2017/CARB: California Emission Factor model, developed California Air Resources Board (CARB). MOVES3/EPA: Vehicle Emission Simulator, developed Environmental Protection Agency (EPA).","code":""},{"path":[]},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"emissions-from-road-vehicle-tire-brake-and-surface-wear","dir":"","previous_headings":"Emission factor models and pollutants available","what":"Emissions from road vehicle tire, brake, and surface wear","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"gtfs2emis also provides emissions estimates tire, brake surface wear using EMEP/EEA model. function estimates emissions particulate matter (PM), encompassing black carbon (BC), arises distinct sources (tire, brake, road surface wear). focus primary particles, refer directly emitted, rather generated re-suspension previously deposited material.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"Check guides learning everything know different features: Getting started Defining Fleet data Exploring Emission Factors Exploring Non Exhaust Emission Factors","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"related-packages","dir":"","previous_headings":"Learn more","what":"Related packages","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"several others transport emissions models available different purposes (see ). today, gtfs2emis method capability estimate emissions public transport systems using GTFS data. R: vein Bottom-top-inventory using GPS data. R: EmissV Top-inventory. Python: PythonEmissData Jupyter notebook estimate simple top-emissions. Python: YETI YETI - Yet Another Emissions Traffic Inventory Python: mobair bottom-model using GPS data.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"future-enhancements","dir":"","previous_headings":"Learn more","what":"Future enhancements","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"Include cold-start, resuspension, evaporative emissions factors Add railway emission factors","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"","code":"citation(\"gtfs2emis\") #> To cite gtfs2emis in publications use: #>  #>   Vieira, J. P. B., Pereira, R. H. M., & Andrade, P. R. (2023). Estimating  #>      Public Transport Emissions from General Transit Feed Specification Data.  #>      Transportation Research Part D: Transport and Environment. Volume 119,  #>      103757. https://doi.org/10.1016/j.trd.2023.103757 #>  #> A BibTeX entry for LaTeX users is #>    #>   @article{vieira2023estimating, #>     title = {Estimating Public Transport Emissions from {{General Transit Feed Specification}} Data}, #>     author = {Vieira, Jo{\\~a}o Pedro Bazzo and Pereira, Rafael H. M. and Andrade, Pedro R.}, #>     year = {2023}, #>     month = jun, #>     journal = {Transportation Research Part D: Transport and Environment}, #>     volume = {119}, #>     pages = {103757}, #>     issn = {1361-9209}, #>     doi = {10.1016/j.trd.2023.103757}, #>     urldate = {2023-05-06}, #>     langid = {english}, #>     keywords = {Emission factors,Emission models,GTFS,Gtfs2emis,Public transport emissions,Urban bus} #>   }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/index.html","id":"credits-","dir":"","previous_headings":"Citation","what":"Credits","title":"Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data","text":"gtfs2emis package developed team Institute Applied Economic Research (IPEA) collaboration National Institute Space Research (INPE), Brazil.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb.html","id":null,"dir":"Reference","previous_headings":"","what":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","title":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","text":"Returns vector data.table emission factors buses based estimates  Environment Company Sao Paulo, Brazil (CETESB) 2019. Emission factor estimates expressed units 'g/km'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","text":"","code":"ef_brazil_cetesb(pollutant, veh_type, model_year, as_list = TRUE)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","text":"pollutant character. Pollutants \"CH4\", \"CO2\", \"PM10\", \"N2O\", \"NOx\", \"NO2\", \"\", \"RCHO\", \"ETOH\" \"KML\" (Vehicle Kilometers Traveled), \"FC\" (Fuel Consumption), \"gD/KWH\" (grams Diesel per kWh), \"gCO2/KWH\" (grams CO2 per per kWh), \"CO\", \"HC\" (Total Hydrocarbon), \"NMHC\" (Non-Methane Hydrocarbon), \"FS\"(Fuel Sales) \"NH3\". veh_type character. Vehicle categories fuel: \"BUS_URBAN_D\", \"BUS_MICRO_D\", \"BUS_COACH_D\" \"BUS_ARTIC_D\". model_year numeric. Vehicle model year. Supports model_year 1960 2020. as_list logical. TRUE (default), function returns output list format. FALSE, output returned data.table format.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","text":"data.table. Emission factors units 'g/km' model_year.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","text":"new convention vehicles names translated CETESB report: percentage varies biofuels varies law. emission factors exactly report CETESB. emission factors, also NO2 based split published EMEP/EEA air pollutant emission inventory guidebook. Also, emission factors extended till 50 years use, repeating oldest value.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running exhaust emissions factors for buses from Brazil (CETESB) — ef_brazil_cetesb","text":"","code":"df <- ef_brazil_cetesb(           pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\"),           veh_type = \"BUS_URBAN_D\",           model_year = 2015,           as_list = TRUE)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission factors from Environment Company of Sao Paulo, Brazil (CETESB) — ef_brazil_cetesb_db","title":"Emission factors from Environment Company of Sao Paulo, Brazil (CETESB) — ef_brazil_cetesb_db","text":"units 'g/km'; Emission factors buses based estimates Environment Company Sao Paulo, Brazil (CETESB) 2017, obtained vein package. R script used organize CETESB database can found repository <https://github.com/ipeaGIT/gtfs2emis/blob/master/data-raw/ef_brazil_cetesb_db.R>.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission factors from Environment Company of Sao Paulo, Brazil (CETESB) — ef_brazil_cetesb_db","text":"","code":"ef_brazil_cetesb_db"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_brazil_cetesb_db.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Emission factors from Environment Company of Sao Paulo, Brazil (CETESB) — ef_brazil_cetesb_db","text":"data.table: pollutant character; Pollutants: \"CH4\", \"CO2\", \"PM10\", \"N2O\", \"KML\", \"FC\" (Fuel Consumption), \"gD/KWH\", \"gCO2/KWH\", \"CO\", \"HC\" (Total Hydrocarbon), \"NMHC\" (Non-Methane Hydrocarbon), \"NOx\", \"NO2\", \"\", \"RCHO\", \"ETOH\", \"FS\"(Fuel Sales) \"NH3\" veh_type character; Vehicle categories fuel:\"BUS_URBAN_D\", \"BUS_MICRO_D\", \"BUS_COACH_D\" \"BUS_ARTIC_D\". model_year numeric; Filter emission factor start specific base year. as_list logical; Returns emission factors list, instead data.table format.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","title":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","text":"Returns list data.table emission factors buses based EMEP/EEA air pollutant emission inventory guidebooks. function uses four emission factor databases published EMEP/EEA, considering editions 2019, 2016, 2013 2007. Estimates expressed units 'g/km'. See @details.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","text":"","code":"ef_europe_emep(   speed,   veh_type,   euro,   pollutant,   fuel = \"D\",   tech = \"SCR\",   slope = 0,   load = 0.5,   fcorr = 1,   as_list = TRUE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","text":"speed units; Speed 'km/h'. veh_type character; Bus type, classified \"Ubus Midi <=15 t\",\"Ubus Std 15 - 18 t\",\"Ubus Artic >18 t\", \"Coaches Std <=18 t\",\"Coaches Artic >18 t\". euro character; Euro period vehicle, classified \"Conventional\", \"\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"EEV\". pollutant character; Pollutant, classified \"FC\",\"CO2\",\"CO\",\"NOx\",\"VOC\",\"PM10\",\"EC\",\"CH4\",\"NH3\",\"N2O\". \"FC\" means Fuel Consumption. fuel character; Fuel type, classified \"D\" (Diesel),\"DHD\" (Diesel Hybrid ~ Diesel), \"DHE\" (Diesel Hybrid ~ Electricity), \"CNG\" (Compressed Natural Gas), \"BD\" (Biodiesel). tech character; treatment technology, classified \"SCR\" (Selective Catalytic Reduction), \"EGR\" (Exhaust Gas Recirculation), \"DPF+SCR\" (Diesel Particulate Filter + SCR, Euro VI). Default \"SCR\" \"IV\" \"V\". available treatment technology associated euro standards \"Conventional\", \"\", \"II\" \"III\". slope numeric; Slope gradient, classified -0.06, -0.04, -0.02, 0.00, 0.02, 0.04 0.06. Negative gradients means downhills positive uphills. Default 0.0. load numeric; Load ratio, classified 0.0, 0.5 1.0. Default 0.5. fcorr numeric; Correction based fuel composition. length must one per euro standards. Default 1.0. as_list logical; Returns emission factors list, instead data.table format. Default TRUE.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","text":"List. emission factors units 'g/km' (list data.table).","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","text":"new convention vehicles names translated EMEP/EEA report: information vehicle technology match existing database, function display message mentioning returned technology. User can either select existing data combining variables (euro, tech, veh_type pollutant), accept assumed change vehicle technology. order cover pollutants, vehicle technologies, fuel consumption data, function uses four emission factor databases published EMEP/EEA, considering editions 2019, 2016, 2013 2007. R scripts used download pre-process 4 EMEP/EEA editions (2019, 2016, 2013 2007) can accessed 'gtfs2emis' GitHub repository <https://github.com/ipeaGIT/gtfs2emis/blob/master/data-raw/ef_europe_emep_db.R> EMEP/EEA data reports can accessed following links: 2019 edition https://www.eea.europa.eu/themes/air/air-pollution-sources-1/emep-eea-air-pollutant-emission-inventory-guidebook, 2016 edition https://www.eea.europa.eu/publications/emep-eea-guidebook-2016/, 2013 edition https://www.eea.europa.eu/publications/emep-eea-guidebook-2013/, 2007 edition https://www.eea.europa.eu/publications/EMEPCORINAIR5/.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speed-dependent emission factor from the European Environment Agency (EMEP/EEA) model — ef_europe_emep","text":"","code":"ef_europe_emep( speed = units::set_units(1:100,\"km/h\"),                 veh_type = c(\"Ubus Midi <=15 t\",\"Ubus Std 15 - 18 t\",\"Ubus Artic >18 t\"),                 euro = c(\"IV\",\"V\"),                 fuel = \"D\",                 pollutant = c(\"CO\",\"PM10\",\"CH4\",\"NOx\"),                 as_list = FALSE)  #>            CO_Euro_IV        CO_Euro_V      PM10_Euro_IV       PM10_Euro_V #>               <units>          <units>           <units>           <units> #>   1: 1.7887769 [g/km] 10.207133 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   2: 1.7887769 [g/km] 10.207133 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   3: 1.7887769 [g/km] 10.207133 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   4: 1.7887769 [g/km] 10.207133 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   5: 1.7887769 [g/km] 10.207133 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   6: 1.7887769 [g/km]  8.960425 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   7: 1.7887769 [g/km]  7.872159 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   8: 1.7887769 [g/km]  6.971286 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>   9: 1.7887769 [g/km]  6.236581 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>  10: 1.7887769 [g/km]  5.635924 [g/km] 0.05678656 [g/km] 0.10527752 [g/km] #>  11: 1.7887769 [g/km]  5.140274 [g/km] 0.05678656 [g/km] 0.09857818 [g/km] #>  12: 1.6646041 [g/km]  4.726557 [g/km] 0.05389617 [g/km] 0.09278112 [g/km] #>  13: 1.5586009 [g/km]  4.377183 [g/km] 0.05137958 [g/km] 0.08772752 [g/km] #>  14: 1.4669606 [g/km]  4.078870 [g/km] 0.04916423 [g/km] 0.08329011 [g/km] #>  15: 1.3868797 [g/km]  3.821557 [g/km] 0.04719595 [g/km] 0.07936711 [g/km] #>  16: 1.3162466 [g/km]  3.597558 [g/km] 0.04543344 [g/km] 0.07587681 [g/km] #>  17: 1.2534396 [g/km]  3.400935 [g/km] 0.04384455 [g/km] 0.07275328 [g/km] #>  18: 1.1971916 [g/km]  3.227046 [g/km] 0.04240378 [g/km] 0.06994287 [g/km] #>  19: 1.1464982 [g/km]  3.072222 [g/km] 0.04109068 [g/km] 0.06740165 [g/km] #>  20: 1.1005520 [g/km]  2.933529 [g/km] 0.03988854 [g/km] 0.06509335 [g/km] #>  21: 1.0586969 [g/km]  2.808598 [g/km] 0.03878362 [g/km] 0.06298782 [g/km] #>  22: 1.0203936 [g/km]  2.695496 [g/km] 0.03776446 [g/km] 0.06105981 [g/km] #>  23: 0.9851947 [g/km]  2.592632 [g/km] 0.03682142 [g/km] 0.05928802 [g/km] #>  24: 0.9527259 [g/km]  2.498687 [g/km] 0.03594632 [g/km] 0.05765441 [g/km] #>  25: 0.9226713 [g/km]  2.412555 [g/km] 0.03513218 [g/km] 0.05614356 [g/km] #>  26: 0.8947627 [g/km]  2.333306 [g/km] 0.03437298 [g/km] 0.05474225 [g/km] #>  27: 0.8687706 [g/km]  2.260151 [g/km] 0.03366352 [g/km] 0.05343908 [g/km] #>  28: 0.8444975 [g/km]  2.192416 [g/km] 0.03299925 [g/km] 0.05222416 [g/km] #>  29: 0.8217727 [g/km]  2.129522 [g/km] 0.03237621 [g/km] 0.05108887 [g/km] #>  30: 0.8004474 [g/km]  2.070971 [g/km] 0.03179088 [g/km] 0.05002568 [g/km] #>  31: 0.7803917 [g/km]  2.016328 [g/km] 0.03124018 [g/km] 0.04902797 [g/km] #>  32: 0.7614914 [g/km]  1.965217 [g/km] 0.03072136 [g/km] 0.04808990 [g/km] #>  33: 0.7436459 [g/km]  1.917307 [g/km] 0.03023197 [g/km] 0.04720630 [g/km] #>  34: 0.7267660 [g/km]  1.872307 [g/km] 0.02976981 [g/km] 0.04637259 [g/km] #>  35: 0.7107725 [g/km]  1.829959 [g/km] 0.02933291 [g/km] 0.04558467 [g/km] #>  36: 0.6955948 [g/km]  1.790038 [g/km] 0.02891951 [g/km] 0.04483888 [g/km] #>  37: 0.6811696 [g/km]  1.752340 [g/km] 0.02852800 [g/km] 0.04413195 [g/km] #>  38: 0.6674401 [g/km]  1.716685 [g/km] 0.02815694 [g/km] 0.04346093 [g/km] #>  39: 0.6543553 [g/km]  1.682911 [g/km] 0.02780499 [g/km] 0.04282315 [g/km] #>  40: 0.6418690 [g/km]  1.650875 [g/km] 0.02747096 [g/km] 0.04221621 [g/km] #>  41: 0.6299394 [g/km]  1.620445 [g/km] 0.02715376 [g/km] 0.04163794 [g/km] #>  42: 0.6185286 [g/km]  1.591504 [g/km] 0.02685239 [g/km] 0.04108635 [g/km] #>  43: 0.6076021 [g/km]  1.563944 [g/km] 0.02656592 [g/km] 0.04055965 [g/km] #>  44: 0.5971284 [g/km]  1.537671 [g/km] 0.02629351 [g/km] 0.04005620 [g/km] #>  45: 0.5870789 [g/km]  1.512595 [g/km] 0.02603438 [g/km] 0.03957448 [g/km] #>  46: 0.5774271 [g/km]  1.488637 [g/km] 0.02578783 [g/km] 0.03911313 [g/km] #>  47: 0.5681490 [g/km]  1.465723 [g/km] 0.02555318 [g/km] 0.03867088 [g/km] #>  48: 0.5592224 [g/km]  1.443788 [g/km] 0.02532983 [g/km] 0.03824657 [g/km] #>  49: 0.5506267 [g/km]  1.422769 [g/km] 0.02511721 [g/km] 0.03783914 [g/km] #>  50: 0.5423432 [g/km]  1.402611 [g/km] 0.02491479 [g/km] 0.03744760 [g/km] #>  51: 0.5343545 [g/km]  1.383262 [g/km] 0.02472209 [g/km] 0.03707104 [g/km] #>  52: 0.5266443 [g/km]  1.364673 [g/km] 0.02453866 [g/km] 0.03670862 [g/km] #>  53: 0.5191977 [g/km]  1.346802 [g/km] 0.02436407 [g/km] 0.03635955 [g/km] #>  54: 0.5120010 [g/km]  1.329607 [g/km] 0.02419793 [g/km] 0.03602312 [g/km] #>  55: 0.5050410 [g/km]  1.313050 [g/km] 0.02403987 [g/km] 0.03569864 [g/km] #>  56: 0.4983059 [g/km]  1.297098 [g/km] 0.02388954 [g/km] 0.03538551 [g/km] #>  57: 0.4917845 [g/km]  1.281716 [g/km] 0.02374663 [g/km] 0.03508312 [g/km] #>  58: 0.4854662 [g/km]  1.266877 [g/km] 0.02361083 [g/km] 0.03479094 [g/km] #>  59: 0.4793413 [g/km]  1.252550 [g/km] 0.02348187 [g/km] 0.03450847 [g/km] #>  60: 0.4734007 [g/km]  1.238710 [g/km] 0.02335948 [g/km] 0.03423522 [g/km] #>  61: 0.4676358 [g/km]  1.225333 [g/km] 0.02324340 [g/km] 0.03397075 [g/km] #>  62: 0.4620386 [g/km]  1.212395 [g/km] 0.02313341 [g/km] 0.03371464 [g/km] #>  63: 0.4566016 [g/km]  1.199877 [g/km] 0.02302929 [g/km] 0.03346651 [g/km] #>  64: 0.4513176 [g/km]  1.187756 [g/km] 0.02293084 [g/km] 0.03322599 [g/km] #>  65: 0.4461800 [g/km]  1.176016 [g/km] 0.02283785 [g/km] 0.03299274 [g/km] #>  66: 0.4411825 [g/km]  1.164637 [g/km] 0.02275014 [g/km] 0.03276642 [g/km] #>  67: 0.4363193 [g/km]  1.153605 [g/km] 0.02266755 [g/km] 0.03254675 [g/km] #>  68: 0.4315847 [g/km]  1.142902 [g/km] 0.02258990 [g/km] 0.03233341 [g/km] #>  69: 0.4269735 [g/km]  1.132515 [g/km] 0.02251706 [g/km] 0.03212616 [g/km] #>  70: 0.4224807 [g/km]  1.122430 [g/km] 0.02244887 [g/km] 0.03192473 [g/km] #>  71: 0.4181015 [g/km]  1.112634 [g/km] 0.02238519 [g/km] 0.03172888 [g/km] #>  72: 0.4138316 [g/km]  1.103115 [g/km] 0.02232590 [g/km] 0.03153838 [g/km] #>  73: 0.4096668 [g/km]  1.093860 [g/km] 0.02227087 [g/km] 0.03135301 [g/km] #>  74: 0.4056029 [g/km]  1.084860 [g/km] 0.02222000 [g/km] 0.03117257 [g/km] #>  75: 0.4016363 [g/km]  1.076104 [g/km] 0.02217317 [g/km] 0.03099688 [g/km] #>  76: 0.3977633 [g/km]  1.067582 [g/km] 0.02213027 [g/km] 0.03082573 [g/km] #>  77: 0.3939805 [g/km]  1.059284 [g/km] 0.02209122 [g/km] 0.03065896 [g/km] #>  78: 0.3902846 [g/km]  1.051203 [g/km] 0.02205592 [g/km] 0.03049640 [g/km] #>  79: 0.3866726 [g/km]  1.043329 [g/km] 0.02202427 [g/km] 0.03033790 [g/km] #>  80: 0.3831415 [g/km]  1.035655 [g/km] 0.02199621 [g/km] 0.03018331 [g/km] #>  81: 0.3796884 [g/km]  1.028174 [g/km] 0.02197166 [g/km] 0.03003247 [g/km] #>  82: 0.3763108 [g/km]  1.020877 [g/km] 0.02195053 [g/km] 0.02988526 [g/km] #>  83: 0.3730061 [g/km]  1.013759 [g/km] 0.02193276 [g/km] 0.02974156 [g/km] #>  84: 0.3697718 [g/km]  1.006813 [g/km] 0.02191829 [g/km] 0.02960122 [g/km] #>  85: 0.3666055 [g/km]  1.000033 [g/km] 0.02190705 [g/km] 0.02946414 [g/km] #>  86: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  87: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  88: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  89: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  90: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  91: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  92: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  93: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  94: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  95: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  96: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  97: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  98: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>  99: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #> 100: 0.3635052 [g/km]  1.000033 [g/km] 0.02189898 [g/km] 0.02946414 [g/km] #>            CO_Euro_IV        CO_Euro_V      PM10_Euro_IV       PM10_Euro_V #>         CH4_Euro_IV     CH4_Euro_V     NOx_Euro_IV       NOx_Euro_V #>             <units>        <units>         <units>          <units> #>   1: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 24.351882 [g/km] #>   2: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 24.351882 [g/km] #>   3: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 24.351882 [g/km] #>   4: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 24.351882 [g/km] #>   5: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 24.351882 [g/km] #>   6: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 21.626354 [g/km] #>   7: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 19.534300 [g/km] #>   8: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 17.853729 [g/km] #>   9: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 16.459202 [g/km] #>  10: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 15.273909 [g/km] #>  11: 0.00525 [g/km] 0.00525 [g/km] 7.371010 [g/km] 14.247814 [g/km] #>  12: 0.00525 [g/km] 0.00525 [g/km] 6.937083 [g/km] 13.346684 [g/km] #>  13: 0.00525 [g/km] 0.00525 [g/km] 6.581100 [g/km] 12.546143 [g/km] #>  14: 0.00525 [g/km] 0.00525 [g/km] 6.279923 [g/km] 11.828254 [g/km] #>  15: 0.00525 [g/km] 0.00525 [g/km] 6.019700 [g/km] 11.179450 [g/km] #>  16: 0.00525 [g/km] 0.00525 [g/km] 5.791331 [g/km] 10.589227 [g/km] #>  17: 0.00525 [g/km] 0.00525 [g/km] 5.588457 [g/km] 10.049287 [g/km] #>  18: 0.00525 [g/km] 0.00525 [g/km] 5.406438 [g/km]  9.552964 [g/km] #>  19: 0.00525 [g/km] 0.00525 [g/km] 5.241775 [g/km]  9.094821 [g/km] #>  20: 0.00525 [g/km] 0.00525 [g/km] 5.091762 [g/km]  8.670366 [g/km] #>  21: 0.00525 [g/km] 0.00525 [g/km] 4.954263 [g/km]  8.275843 [g/km] #>  22: 0.00525 [g/km] 0.00525 [g/km] 4.827565 [g/km]  7.908083 [g/km] #>  23: 0.00525 [g/km] 0.00525 [g/km] 4.710272 [g/km]  7.564386 [g/km] #>  24: 0.00525 [g/km] 0.00525 [g/km] 4.601233 [g/km]  7.242433 [g/km] #>  25: 0.00525 [g/km] 0.00525 [g/km] 4.499489 [g/km]  6.940219 [g/km] #>  26: 0.00525 [g/km] 0.00525 [g/km] 4.404234 [g/km]  6.655999 [g/km] #>  27: 0.00525 [g/km] 0.00525 [g/km] 4.314784 [g/km]  6.388243 [g/km] #>  28: 0.00525 [g/km] 0.00525 [g/km] 4.230551 [g/km]  6.135608 [g/km] #>  29: 0.00525 [g/km] 0.00525 [g/km] 4.151033 [g/km]  5.896902 [g/km] #>  30: 0.00525 [g/km] 0.00525 [g/km] 4.075793 [g/km]  5.671069 [g/km] #>  31: 0.00525 [g/km] 0.00525 [g/km] 4.004448 [g/km]  5.457166 [g/km] #>  32: 0.00525 [g/km] 0.00525 [g/km] 3.936665 [g/km]  5.254351 [g/km] #>  33: 0.00525 [g/km] 0.00525 [g/km] 3.872151 [g/km]  5.061864 [g/km] #>  34: 0.00525 [g/km] 0.00525 [g/km] 3.810643 [g/km]  4.879025 [g/km] #>  35: 0.00525 [g/km] 0.00525 [g/km] 3.751910 [g/km]  4.705215 [g/km] #>  36: 0.00525 [g/km] 0.00525 [g/km] 3.695746 [g/km]  4.539877 [g/km] #>  37: 0.00525 [g/km] 0.00525 [g/km] 3.641965 [g/km]  4.382505 [g/km] #>  38: 0.00525 [g/km] 0.00525 [g/km] 3.590401 [g/km]  4.232637 [g/km] #>  39: 0.00525 [g/km] 0.00525 [g/km] 3.540904 [g/km]  4.089853 [g/km] #>  40: 0.00525 [g/km] 0.00525 [g/km] 3.493336 [g/km]  3.953770 [g/km] #>  41: 0.00525 [g/km] 0.00525 [g/km] 3.447575 [g/km]  3.824038 [g/km] #>  42: 0.00525 [g/km] 0.00525 [g/km] 3.403508 [g/km]  3.700336 [g/km] #>  43: 0.00525 [g/km] 0.00525 [g/km] 3.361033 [g/km]  3.582371 [g/km] #>  44: 0.00525 [g/km] 0.00525 [g/km] 3.320055 [g/km]  3.469872 [g/km] #>  45: 0.00525 [g/km] 0.00525 [g/km] 3.280489 [g/km]  3.362594 [g/km] #>  46: 0.00525 [g/km] 0.00525 [g/km] 3.242255 [g/km]  3.260308 [g/km] #>  47: 0.00525 [g/km] 0.00525 [g/km] 3.205280 [g/km]  3.162809 [g/km] #>  48: 0.00525 [g/km] 0.00525 [g/km] 3.169497 [g/km]  3.069903 [g/km] #>  49: 0.00525 [g/km] 0.00525 [g/km] 3.134844 [g/km]  2.981417 [g/km] #>  50: 0.00525 [g/km] 0.00525 [g/km] 3.101263 [g/km]  2.897189 [g/km] #>  51: 0.00525 [g/km] 0.00525 [g/km] 3.068700 [g/km]  2.817074 [g/km] #>  52: 0.00525 [g/km] 0.00525 [g/km] 3.037106 [g/km]  2.740938 [g/km] #>  53: 0.00525 [g/km] 0.00525 [g/km] 3.006433 [g/km]  2.668657 [g/km] #>  54: 0.00525 [g/km] 0.00525 [g/km] 2.976640 [g/km]  2.600122 [g/km] #>  55: 0.00525 [g/km] 0.00525 [g/km] 2.947685 [g/km]  2.535233 [g/km] #>  56: 0.00525 [g/km] 0.00525 [g/km] 2.919530 [g/km]  2.473899 [g/km] #>  57: 0.00525 [g/km] 0.00525 [g/km] 2.892140 [g/km]  2.416041 [g/km] #>  58: 0.00525 [g/km] 0.00525 [g/km] 2.865482 [g/km]  2.361587 [g/km] #>  59: 0.00525 [g/km] 0.00525 [g/km] 2.839525 [g/km]  2.310475 [g/km] #>  60: 0.00525 [g/km] 0.00525 [g/km] 2.814239 [g/km]  2.262653 [g/km] #>  61: 0.00525 [g/km] 0.00525 [g/km] 2.789596 [g/km]  2.218074 [g/km] #>  62: 0.00525 [g/km] 0.00525 [g/km] 2.765571 [g/km]  2.176704 [g/km] #>  63: 0.00525 [g/km] 0.00525 [g/km] 2.742139 [g/km]  2.138514 [g/km] #>  64: 0.00525 [g/km] 0.00525 [g/km] 2.719276 [g/km]  2.103483 [g/km] #>  65: 0.00525 [g/km] 0.00525 [g/km] 2.696961 [g/km]  2.071601 [g/km] #>  66: 0.00525 [g/km] 0.00525 [g/km] 2.675174 [g/km]  2.042864 [g/km] #>  67: 0.00525 [g/km] 0.00525 [g/km] 2.653893 [g/km]  2.017277 [g/km] #>  68: 0.00525 [g/km] 0.00525 [g/km] 2.633101 [g/km]  1.994856 [g/km] #>  69: 0.00525 [g/km] 0.00525 [g/km] 2.612780 [g/km]  1.975622 [g/km] #>  70: 0.00525 [g/km] 0.00525 [g/km] 2.592913 [g/km]  1.959608 [g/km] #>  71: 0.00525 [g/km] 0.00525 [g/km] 2.573485 [g/km]  1.946858 [g/km] #>  72: 0.00525 [g/km] 0.00525 [g/km] 2.554479 [g/km]  1.937423 [g/km] #>  73: 0.00525 [g/km] 0.00525 [g/km] 2.535882 [g/km]  1.931367 [g/km] #>  74: 0.00525 [g/km] 0.00525 [g/km] 2.517680 [g/km]  1.928766 [g/km] #>  75: 0.00525 [g/km] 0.00525 [g/km] 2.499859 [g/km]  1.929707 [g/km] #>  76: 0.00525 [g/km] 0.00525 [g/km] 2.482407 [g/km]  1.934291 [g/km] #>  77: 0.00525 [g/km] 0.00525 [g/km] 2.465313 [g/km]  1.942636 [g/km] #>  78: 0.00525 [g/km] 0.00525 [g/km] 2.448564 [g/km]  1.954871 [g/km] #>  79: 0.00525 [g/km] 0.00525 [g/km] 2.432150 [g/km]  1.971148 [g/km] #>  80: 0.00525 [g/km] 0.00525 [g/km] 2.416060 [g/km]  1.991633 [g/km] #>  81: 0.00525 [g/km] 0.00525 [g/km] 2.400285 [g/km]  2.016517 [g/km] #>  82: 0.00525 [g/km] 0.00525 [g/km] 2.384815 [g/km]  2.046013 [g/km] #>  83: 0.00525 [g/km] 0.00525 [g/km] 2.369640 [g/km]  2.080360 [g/km] #>  84: 0.00525 [g/km] 0.00525 [g/km] 2.354752 [g/km]  2.119827 [g/km] #>  85: 0.00525 [g/km] 0.00525 [g/km] 2.340142 [g/km]  2.164714 [g/km] #>  86: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  87: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  88: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  89: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  90: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  91: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  92: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  93: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  94: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  95: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  96: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  97: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  98: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>  99: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #> 100: 0.00525 [g/km] 0.00525 [g/km] 2.325803 [g/km]  2.164714 [g/km] #>         CH4_Euro_IV     CH4_Euro_V     NOx_Euro_IV       NOx_Euro_V"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission factors from European Environment Agency — EMEP/EEA — ef_europe_emep_db","title":"Emission factors from European Environment Agency — EMEP/EEA — ef_europe_emep_db","text":"Hot exhaust emission factors speed dependent functions expressed g/km. varies fuel, vehicle segment, euro standard, pollutant, treatment technology. variables consolidated different EF equations, given :","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission factors from European Environment Agency — EMEP/EEA — ef_europe_emep_db","text":"","code":"ef_europe_emep_db"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep_db.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Emission factors from European Environment Agency — EMEP/EEA — ef_europe_emep_db","text":"data.table 6431 rows 22 variables: Category Buses. Fuel Fuel type, classified \"D\" (Diesel),\"DHD\" (Diesel Hybrid ~ Diesel), \"DHE\" (Diesel Hybrid ~ Electricity), \"CNG\" (Compressed Natural Gas), \"BD\" (Biodiesel). Segment character; Bus type, classified \"Ubus Midi <=15 t\",\"Ubus Std 15 - 18 t\",\"Ubus Artic >18 t\", \"Coaches Std <=18 t\",\"Coaches Artic >18 t\". Euro character; Euro period vehicle, classified \"Conventional\", \"\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"EEV\". Technology character; treatment technology, classified \"SCR\" (Selective Catalytic Reduction), \"EGR\" (Exhaust Gas Recirculation), \"DPF+SCR\" (Diesel Particulate Filter + SCR, Euro VI). Default \"SCR\" \"IV\" \"V\". available treatment technology associated euro standards \"Conventional\", \"\", \"II\" \"III\". Pol character; Pollutant, classified \"FC\",\"CO2\",\"CO\",\"NOx\",\"VOC\",\"PM10\",\"EC\",\"CH4\",\"NH3\",\"N2O\". \"FC\" means Fuel Consumption. Vmin Minimum speed emission factor estimation, km/h. Vmax Maximum speed emission factor estimation, km/h. Alpha, Beta, Gamma, Delta, Epsilon, Zita, Hta, Thita Constant parameters. RF Reduction Factor; percentage (%) units. k Constant factor.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep_db.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Emission factors from European Environment Agency — EMEP/EEA — ef_europe_emep_db","text":"information can found https://www.eea.europa.eu//publications/emep-eea-guidebook-2019, https://www.eea.europa.eu/publications/emep-eea-guidebook-2016/, https://www.eea.europa.eu/publications/emep-eea-guidebook-2013/, https://www.eea.europa.eu/publications/EMEPCORINAIR5/.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_europe_emep_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Emission factors from European Environment Agency — EMEP/EEA — ef_europe_emep_db","text":"EF = EF(Alpha, Beta, Gamma, Delta, Epsilon, Zita, Hta, RF, Speed, Function_ID, k, fcorr), Alpha, Beta, Gamma, Delta, Epsilon, Zeta, Eta constant parameters; RF Reduction Factor, Speed average speed, Function_ID equation (function year inventory pollutant); k constant value, fcorr fuel correction factor. emissions factors derived EMEP/EEA air pollutant emission inventory guidebook (formerly called EMEP CORINAIR emission inventory guidebook). document provides guidance estimating emissions anthropogenic natural emission sources. package presents combination emission factors EMEP/EEA guidelines 2007, 2013, 2016, 2019, aiming cover greater number pollutants vehicle segments. script used process raw EMEP/EEA databases can found repository <https://github.com/ipeaGIT/gtfs2emis/blob/master/data-raw/ef_europe_emep_db.R>.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_scaled_euro.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","title":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","text":"Scale emission factors account vehicle speed based values emission factor model European Environment Agency (EMEP/EEA). Emission factor estimates expressed units 'g/km'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_scaled_euro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","text":"","code":"ef_scaled_euro(   ef_local,   speed,   veh_type,   euro,   pollutant,   fuel = \"D\",   tech = \"SCR\",   SDC = 19,   slope = 0,   load = 0.5,   fcorr = 1 )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_scaled_euro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","text":"ef_local data.frame list containing emission factors data.frame. Local emission factors, units 'g/km'. speed units. Speed 'km/h'. veh_type character. Bus type, classified \"Ubus Midi <=15 t\", \"Ubus Std 15 - 18 t\",  \"Ubus Artic >18 t\", \"Coaches Std <=18 t\", \"Coaches Artic >18 t\". euro character. Euro period vehicle, classified \"Conventional\", \"\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"EEV\". pollutant character. Pollutant: \"FC\", \"CO2\", \"CO\", \"NOx\", \"VOC\", \"PM10\", \"EC\", \"CH4\", \"NH3\", \"N2O\", \"FC\" (fuel consumption). fuel character. Fuel type, classified \"D\" (Diesel), \"DHD\" (Diesel Hybrid ~ Diesel), \"DHE\" (Diesel Hybrid ~ Electricity), \"CNG\" (Compressed Natural Gas), \"BD\" (Biodiesel). Default \"D\". tech character. treatment technology, classified \"SCR\" (Selective Catalytic Reduction), \"EGR\" (Exhaust Gas Recirculation), \"DPF+SCR\" (Diesel Particulate Filter + SCR, Euro VI). Default \"SCR\" \"IV\" \"V\". SDC numeric. Average speed urban driving condition 'km/h'. Default 19 km/h,  average speed adopted EMEP/EEA report. slope numeric. Slope gradient, categorized -0.06, -0.04, -0.02, 0.00, 0.02, 0.04 0.06. Negative gradients means downhills positive uphills. Default 0.0. load numeric. Passenger load ratio, classified 0.0, 0.5 1.0. Default 0.5. fcorr numeric. Correction based fuel composition. length must one per euro standards. Default 1.0.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_scaled_euro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","text":"list. Emission factors units 'g/km'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_scaled_euro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","text":"scaled emission factor related speed expression EF_scaled (V) = EF_local * ( EF(V) / EF(SDC)), EF_scaled(V) scaled emission factors street link, EF_local local emission factor, EF(V) EF(SDC) EMEP/EEA emission factor speed V average urban driving speed 'SDC', respectively. Please note function reads vector arguments order informed user. instance, pollutant input c(\"CO\",\"PM10\") input local emission factor function, order needs pollutant ef_scaled_euro function. case vehicle type, generally changes according emission factor source, input argument ef_scaled_euro needs consistent order adopted local emission factor function. example, vector local vehicle type c(\"BUS_URBAN_D\",\"BUS_MICRO_D\"), related vector EMEP/EEA model needs c(\"Ubus Std 15 - 18 t\",\"Ubus Midi <=15 t\"). approach applies input arguments. See examples.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_scaled_euro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale local emission factors in order to make emission estimates a function of speed. — ef_scaled_euro","text":"","code":"temp_ef_br <- ef_brazil_cetesb(                     pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\"),                     veh_type = c(\"BUS_URBAN_D\",\"BUS_MICRO_D\"),                     model_year = c(2015,2015),                     as_list = TRUE                     )  temp_ef_scaled <- ef_scaled_euro(                     ef_local = temp_ef_br,                     speed = units::set_units(1:100,\"km/h\"),                     veh_type = c(\"Ubus Std 15 - 18 t\",\"Ubus Midi <=15 t\"),                     euro = c(\"IV\",\"IV\"),                     fuel = c(\"D\",\"D\"),                     tech = c(\"SCR\",\"SCR\"),                     pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\")                     ) #> 'CO2' Emission factor not found for 'SCR' Technology and Euro 'IV'. #>  The package assumes missing Technology entry. Please check `data(ef_europe_emep_db)` for available data. #> 'CO2' Emission factor not found for 'SCR' Technology and Euro 'IV'. #>  The package assumes missing Technology entry. Please check `data(ef_europe_emep_db)` for available data. #> 'CO2' Emission factor not found for 'SCR' Technology and Euro 'IV'. #>  The package assumes missing Technology entry. Please check `data(ef_europe_emep_db)` for available data. #> 'CO2' Emission factor not found for 'SCR' Technology and Euro 'IV'. #>  The package assumes missing Technology entry. Please check `data(ef_europe_emep_db)` for available data."},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac.html","id":null,"dir":"Reference","previous_headings":"","what":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","title":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","text":"Returns vector data.frame emission factors buses based California EMission Factor model (EMFAC2017). model considers emission factors (EF) urban buses California (United States), considering different pollutants, years reference, model year, fuel, speed ranges, type regions, model version, type season. gtfs2emis package currently supports EF \"Statewide\" region type, \"Annual\" season.  Specific data variables can download <https://arb.ca.gov/emfac/emissions-inventory>.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","text":"","code":"ef_usa_emfac(   pollutant,   reference_year = 2020,   fuel = \"D\",   model_year,   speed,   as_list = TRUE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","text":"https://arb.ca.gov/emfac/","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","text":"pollutant character. Pollutants: \"CH4\" (Methane), \"CO\" (Carbon Monoxide), \"CO2\" (Carbon Dioxide), \"N2O\" (Nitrous Oxide), \"NOx\" (Oxides Nitrogen), \"PM10\" (Primary Exhaust PM10 - Total), \"PM25\" (Primary Exhaust PM2.5 - Total), \"SOX\" (Oxides Sulfur), \"TOG\" (Total Organic Gases), \"ROG\"  (Reactive Organic Gases). reference_year numeric. Year reference, emissions inventory estimated. Default 2020. Values 2015 - 2022. fuel character. Type fuel: 'D' (Diesel),'G' (Gasoline), 'CNG' (Compressed Natural Gas). Default 'D'. model_year Numeric; Model year vehicle. speed Units. Speed 'km/h'; Emission factor returned speed intervals: \"5-10\", \"10-15\", \"15-20\", \"20-25\", \"25-30\", \"30-35\", \"35-40\", \"40-45\", \"45-50\", \"50-55\", \"55-60\", \"60-65\", \"65-70\", \"70-75\", \"75-80\", \"80-85\", \"85-90\", \">90\" mph (miles/h). as_list logical. TRUE (default), function returns output list format. FALSE, output returned data.table format.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","text":"List data.table. Emission factors units 'g/km' speed model_year.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running exhaust emissions factors for buses from United States (EMFAC2017 model) — ef_usa_emfac","text":"","code":"df <- ef_usa_emfac(         pollutant = c(\"CO\",\"PM10\"),         reference_year = 2019,         model_year = 2015,         speed = units::set_units(10:100,\"km/h\"),         fuel = \"D\",         as_list = TRUE         )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission factors from California Air Resources Board (EMFAC Model) — ef_usa_emfac_db","title":"Emission factors from California Air Resources Board (EMFAC Model) — ef_usa_emfac_db","text":"Running exhaust emissions factors EMFAC2017 model. model generates emission factors (EF) urban buses California (United States), considering different pollutants, years reference, model year, fuel, speed ranges, type regions, model version, type season. Currently, package supports EFs \"Statewide\" region type, \"Annual\" season. Specific data regions seasons can download <https://arb.ca.gov/emfac/emissions-inventory>.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission factors from California Air Resources Board (EMFAC Model) — ef_usa_emfac_db","text":"","code":"ef_usa_emfac_db"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac_db.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Emission factors from California Air Resources Board (EMFAC Model) — ef_usa_emfac_db","text":"data.table 79198 rows 8 variables: pol Character; Pollutants: CH4(Methane), CO(Carbon Monoxide), CO2(Carbon Dioxide), N2O(Nitrous Oxide), NOx(Oxides Nitrogen), PM10(Primary Exhaust PM10 - Total), PM25(Primary Exhaust PM2.5 - Total), SOX(Oxides Sulfur), TOG(Total Organic Gases), ROG (Reactive Organic Gases) reference_year Numeric; Year reference 2010 - 2020 fuel character; Type fuel: 'D' (Diesel),'G' (Gasoline),'CNG' (Compressed Natural Gas). model_year Model year. speed Units; Speed 'km/h'; Emission factor returned speed intervals \"5-10\", \"10-15\", \"15-20\", \"20-25\", \"25-30\", \"30-35\", \"35-40\", \"40-45\", \"45-50\" \"50-55\", \"55-60\", \"60-65\", \"65-70\", \"70-75\", \"75-80\", \"80-85\", \"85-90\", \">90\" mph (miles/h)","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac_db.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Emission factors from California Air Resources Board (EMFAC Model) — ef_usa_emfac_db","text":"https://arb.ca.gov/emfac/emissions-inventory","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_emfac_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Emission factors from California Air Resources Board (EMFAC Model) — ef_usa_emfac_db","text":"function returns data data.frame format. R script used process raw EMFAC database can found repository <https://github.com/ipeaGIT/gtfs2emis/blob/master/data-raw/ef_usa_emfac_db.R>.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves.html","id":null,"dir":"Reference","previous_headings":"","what":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","title":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","text":"Returns vector data.frame emission factors urban buses based values MOVES3 Model. Emission factor estimates expressed units 'g/km'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","text":"","code":"ef_usa_moves(   pollutant,   model_year,   reference_year = 2020,   speed,   fuel = \"D\",   as_list = TRUE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","text":"pollutant character. Pollutants: \"CH4\" (Methane), \"CO\" (Carbon Monoxide), \"CO2\" (Carbon Dioxide), \"EC\" (Energy Consumption), \"HONO\" (Nitrous Acid), \"N2O\" (Nitrous Oxide), \"NH3\" (Ammonia ), \"NH4\" (Ammonium), \"\" (Nitrogen Oxide), \"NO2\" (Nitrogen Dioxide), \"NO3\" (Nitrate), \"NOx\" (Oxides Nitrogen), \"PM10\" (Primary Exhaust PM10 - Total), \"PM25\" (Primary Exhaust PM2.5 - Total), \"SO2\" (Sulfur Dioxide), \"THC\" (Total Gaseous Hydrocarbons ), \"TOG\" (Total Organic Gases) \"VOC\" (Volatile Organic Compounds) model_year numeric. Model year vehicle. reference_year numeric. Year reference, emissions inventory estimated. Default 2020. Values 2015 - 2022. speed units. Speed 'km/h'. Emission factor returned speed intervals: \"0-2.5\", \"2.5-7.5\", \"7.5-12.5\", \"12.5-17.5\", \"17.5-22.5\", \"22.5-27.5\", \"27.5-32.5\", \"32.5-37.5\", \"37.5-42.5\", \"42.5-47.5\", \"47.5-52.5\", \"52.5-57.5\", \"57.5-62.5\", \"62.5-67.5\", \"67.5-72.5\", \">72.5\" mph (miles/h). fuel character. Type fuel: 'D' (Diesel),'G' (Gasoline), 'CNG' (Compressed Natural Gas). Default 'D'. as_list logical. TRUE (default), function returns output list format. FALSE, output returned data.table format.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","text":"List. Emission factors units 'g/km' speed model_year.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","text":"Users can view pre-processed database data(ef_usa_moves_db) function.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running exhaust emissions factors for buses from United States (MOVES3 model) — ef_usa_moves","text":"","code":"df <- ef_usa_moves(          pollutant = c(\"CO\",\"PM10\"),          model_year = 2015,          speed = units::set_units(10:100,\"km/h\"),          reference_year = 2016,          fuel = \"D\",          as_list = TRUE         )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission factors from MOtor Vehicle Emission Simulator (MOVES) Data.frame of emission factors for buses based on values from the MOVES3 Model. Estimates expressed in units 'g/km'. — ef_usa_moves_db","title":"Emission factors from MOtor Vehicle Emission Simulator (MOVES) Data.frame of emission factors for buses based on values from the MOVES3 Model. Estimates expressed in units 'g/km'. — ef_usa_moves_db","text":"Emission factors MOtor Vehicle Emission Simulator (MOVES) Data.frame emission factors buses based values MOVES3 Model. Estimates expressed units 'g/km'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission factors from MOtor Vehicle Emission Simulator (MOVES) Data.frame of emission factors for buses based on values from the MOVES3 Model. Estimates expressed in units 'g/km'. — ef_usa_moves_db","text":"","code":"ef_usa_moves_db"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves_db.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Emission factors from MOtor Vehicle Emission Simulator (MOVES) Data.frame of emission factors for buses based on values from the MOVES3 Model. Estimates expressed in units 'g/km'. — ef_usa_moves_db","text":"data.table: pollutant character; Pollutants: CH4 (Methane), CO (Carbon Monoxide), CO2 (Carbon Dioxide), EC (Energy Consumption), HONO (Nitrous Acid), N2O (Nitrous Oxide), NH3 (Ammonia),  NH4 (Ammonium), (Nitrogen Oxide), NO2 (Nitrogen Dioxide), NO3 (Nitrate), NOx (Oxides Nitrogen), PM10 (Primary Exhaust PM10 - Total), PM25 (Primary Exhaust PM2.5 - Total), SO2 (Sulfur Dioxide), THC (Total Gaseous Hydrocarbons ), TOG (Total Organic Gases) VOC (Volatile Organic Compounds) fuel_type character; Type fuel: 'D' (Diesel),'G' (Gasoline),'CNG' (Compressed Natural Gas). reference_year Numeric; Calendar Year 2015 - 2022. Year emissions inventory estimated. model_year numeric; Model year vehicle. lower_speed_interval units 'km/h'; Represents lower value speed intervals;  speed intervals \" - 2.5\", \"2.5 - 7.5\", \"7.5 - 12.5\" , \"12.5 - 17.5\", \"17.5 - 22.5\", \"22.5 - 27.5\",\"27.5 - 32.5\",\"32.5 - 37.5\" ,\"37.5 - 42.5\",\"42.5 - 47.5\",\"47.5 - 52.5\",\"52.5 - 57.5\", \"57.5 - 62.5\" , \"62.5 - 67.5\", \"67.5 - 72.5\", \">72.5\" mph (miles/h). upper_speed_interval units km/h; Represents upper value speed intervals. speed intervals analogous lower_speed_interval . source_type character; Type vehicle, currently \"Transit Bus\". id_speed integer;caracterizes types vehicle speeds.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/ef_usa_moves_db.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Emission factors from MOtor Vehicle Emission Simulator (MOVES) Data.frame of emission factors for buses based on values from the MOVES3 Model. Estimates expressed in units 'g/km'. — ef_usa_moves_db","text":"https://www.epa.gov/moves","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emi_europe_emep_wear.html","id":null,"dir":"Reference","previous_headings":"","what":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","title":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","text":"Returns list data.table emissions urban buses based Tier 2 EMEP/EEA air pollutant emission inventory guidebooks (2019). function concerns emissions particulate matter (PM), encompassing black carbon (BC) (1), arises distinct sources, namely, road vehicle tire brake wear (NFR code 1..3.b.vi), road surface wear (NFR code 1..3.b.vii). important note PM emissions exhaust vehicle exhaust excluded. focus primary particles, refer directly emitted due surface wear, rather generated resuspension previously deposited material. See @details.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emi_europe_emep_wear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","text":"","code":"emi_europe_emep_wear(   dist,   speed,   pollutant,   veh_type,   fleet_composition,   load = 0.5,   process = \"tyre\",   as_list = TRUE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emi_europe_emep_wear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","text":"dist units; Length link 'km'. speed units; Speed 'km/h'. pollutant character; Pollutant, classified \"TSP\"(Total Suspended Particles), \"PM10\",\"PM2.5\", \"PM1.0\",\"PM0.1\". Please note emissions factors \"PM1.0\" \"PM0.1\"  available road surface wear process. veh_type character; Bus type, classified \"Ubus Midi <=15 t\", \"Ubus Std 15 - 18 t\", \"Ubus Artic >18 t\", \"Coaches Std >18 t\", \"Coaches Artic >18 t\". fleet_composition vector; Fleet composition, distribution fleet based frequency. one, 'fleet_composition' 1.0. load numeric; Load ratio, classified 0.0, 0.5 1.0. Default 0.5. process character; Emission process sources, classified \"tyre\",\"brake\" /\"road\". as_list logical; Returns emission factors list, instead data.table format. Default TRUE.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emi_europe_emep_wear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","text":"List. emission units 'g' (list data.table).","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emi_europe_emep_wear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","text":"following equation employed evaluate emissions originating tyre brake wear TE() = dist x EF_tsp(j) x mf_s() x sc(speed), : TE()      = total emissions pollutant (g), dist       = distance driven vehicle (km), EF_tsp(j)  = TSP mass emission factor vehicles category j (g/km), mf_s()    = mass fraction TSP can attributed particle size class , sc(speed)  = correction factor mean vehicle travelling given speed (-) Tyre case heavy-duty vehicles, emission factor needs incorporation vehicle size, determined number axles, load. parameters introduced equation follows: EF_tsp_tyre_hdv = 0.5 x N_axle x LCF_tyre x EF_tsp_tyre_pc EF_tsp_tyre_hdv  = TSP emission factor tyre wear heavy-duty vehicles (g/km), N_axle           = number vehicle axles (-), LCF_t            = load correction factor tyre wear (-), EF_tsp_tyre_pc   = TSP emission factor tyre wear passenger car vehicles (g/km). LCF_tyre = 1.41 + (1.38 x LF), : LF = load factor (-), ranging 0 empty bus 1 fully laden one. function considers following look-table number vehicle axes: size distribution tyre wear particles given : Finally, speed correction : sc_tyre(speed) = 1.39, V < 40 km/h; sc_tyre(speed) = -0.00974 x speed + 1.78, 40 <= speed <= 90 km/h; sc_tyre(speed) = 0.902, speed > 90 km/h. Brake heavy-duty vehicle emission factor derived modifying passenger car emission factor conform experimental data obtained heavy-duty vehicles. EF_tsp_brake_hdv = 1.956 x LCF_brake x EF_tsp_brake_pc : EF_tsp_brake_hdv  = heavy-duty vehicle emission factor TSP, LCF_brake         = load correction factor brake wear, EF_tsp_brake_pc   = passenger car emission factor TSP, LCF_brake = 1 + (0.79 x LF), : LF = load factor (-), ranging 0 empty bus 1 fully laden one. size distribution brake wear particles given : Finally, speed correction : sc_brake(speed) = 1.67, V < 40 km/h; sc_brake(speed) = -0.0270 x speed + 2.75, 40 <= speed <= 95 km/h; sc_brake(speed) = 0.185, speed > 95 km/h. Road Wear Emissions calculated according equation: TE() = dist x EF_tsp_road(j) x mf_road : TE          = total emissions pollutant (g), dist        = total distance driven vehicles category j (km), EF_tsp_road = TSP mass emission factor road wear vehicles j (0.0760 g/km), mf_road     = mass fraction TSP can attributed particle size class (-). following table shows size distribution road surface wear particles References #' EMEP/EEA data reports can accessed following links: 2019 edition https://www.eea.europa.eu/publications/emep-eea-guidebook-2019/part-b-sectoral-guidance-chapters/1-energy/1--combustion/1--3-b-vi/view.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emi_europe_emep_wear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emissions from road vehicle tyre, brake, and surface wear from the European Environment Agency (EMEP/EEA) model — emi_europe_emep_wear","text":"","code":"emi_europe_emep_wear(dist = units::set_units(1,\"km\"),                      speed =  units::set_units(30,\"km/h\"),                      pollutant = c(\"PM10\",\"TSP\",\"PM2.5\"),                      veh_type = c(\"Ubus Std 15 - 18 t\",\"Ubus Artic >18 t\"),                      fleet_composition = c(0.5,0.5),                      load = 0.5,                      process = c(\"brake\",\"tyre\",\"road\"),                      as_list = TRUE) #> $pollutant #> [1] \"PM10\"  \"TSP\"   \"PM2.5\" #>  #> $veh_type #> [1] \"Ubus Std 15 - 18 t\" \"Ubus Artic >18 t\"   #>  #> $fleet_composition #> [1] 0.5 0.5 #>  #> $speed #> 30 [km/h] #>  #> $dist #> 1 [km] #>  #> $emi #>    PM10_brake_veh_1 PM10_brake_veh_2 TSP_brake_veh_1 TSP_brake_veh_2 #>             <units>          <units>         <units>         <units> #> 1:   0.01674622 [g]   0.01674622 [g]  0.01708798 [g]  0.01708798 [g] #>    PM2.5_brake_veh_1 PM2.5_brake_veh_2 PM10_tyre_veh_1 PM10_tyre_veh_2 #>              <units>           <units>         <units>         <units> #> 1:   0.006664313 [g]   0.006664313 [g]  0.00936999 [g]  0.01405498 [g] #>    TSP_tyre_veh_1 TSP_tyre_veh_2 PM2.5_tyre_veh_1 PM2.5_tyre_veh_2 #>           <units>        <units>          <units>          <units> #> 1: 0.01561665 [g] 0.02342497 [g]  0.006558993 [g]  0.009838489 [g] #>    PM10_road_veh_1 PM10_road_veh_2 TSP_road_veh_1 TSP_road_veh_2 #>            <units>         <units>        <units>        <units> #> 1:       0.019 [g]       0.019 [g]      0.038 [g]      0.038 [g] #>    PM2.5_road_veh_1 PM2.5_road_veh_2 #>             <units>          <units> #> 1:      0.01026 [g]      0.01026 [g] #>  #> $process #> [1] \"brake\" \"tyre\"  \"road\"  #>"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial aggregation of emission estimates into a grid — emis_grid","title":"Spatial aggregation of emission estimates into a grid — emis_grid","text":"Aggregate emissions proportionally sf polygon grid, performing intersection operation emissions data sf linestring format input grid cells. User can also aggregate emissions grid time day.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial aggregation of emission estimates into a grid — emis_grid","text":"","code":"emis_grid(   emi_list,   grid,   time_resolution = \"day\",   quiet = TRUE,   aggregate = FALSE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial aggregation of emission estimates into a grid — emis_grid","text":"emi_list list. list containing data emissions 'emi' (\"data.frame\" class) transport model 'tp_model' (\"sf\" \"data.frame\" classes). grid Sf polygon. Grid cell data allocate emissions. time_resolution character. Time resolution emissions aggregated. Options 'hour', 'minute', 'day (Default). quiet logical. User can print total emissions intersection operation order check gridded emissions estimated correctly. Default 'TRUE'. aggregate logical. Aggregate emissions pollutant. Default FALSE.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial aggregation of emission estimates into a grid — emis_grid","text":"\"sf\" \"data.frame\" object emissions estimates per grid cell.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial aggregation of emission estimates into a grid — emis_grid","text":"","code":"# \\donttest{ if (requireNamespace(\"gtfstools\", quietly=TRUE)) { library(sf)  # read GTFS gtfs_file <- system.file(\"extdata/bra_cur_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)   # keep a single trip_id to speed up this example gtfs_small <- gtfstools::filter_by_trip_id(gtfs, trip_id =\"4451136\")    # run transport model tp_model <- transport_model(gtfs_data = gtfs_small,                             spatial_resolution = 100,                             parallel = FALSE)  # Fleet data, using Brazilian emission model and fleet fleet_data_ef_cetesb <- data.frame(veh_type = \"BUS_URBAN_D\",                                    model_year = 2010:2019,                                    fuel = \"D\",                                    fleet_composition = rep(0.1,10)                                    ) # Emission model emi_list <- emission_model(                 tp_model = tp_model,                 ef_model = \"ef_brazil_cetesb\",                 fleet_data = fleet_data_ef_cetesb,                 pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\")                 )  # create spatial grid grid <- sf::st_make_grid(   x = sf::st_make_valid(emi_list$tp_model)   , cellsize = 0.25 / 200   , crs= 4326   , what = \"polygons\"   , square = FALSE   )  emi_grid <- emis_grid( emi_list,grid,'day')  plot(grid) plot(emi_grid[\"PM10_2010\"],add = TRUE) plot(st_geometry(emi_list$tp_model), add = TRUE,col = \"black\") } #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> Converting shapes to sf objects #> Processing the data #>  #> Attaching package: ‘data.table’ #> The following object is masked from ‘package:purrr’: #>  #>     transpose #> udunits database from /usr/share/xml/udunits/udunits2.xml #> Constant emission factor along the route  # }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize emissions estimates — emis_summary","title":"Summarize emissions estimates — emis_summary","text":"Summarize emissions estimates, aggregating emissions pollutant, time day, vehicle.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize emissions estimates — emis_summary","text":"","code":"emis_summary(   emi_list,   by = \"pollutant\",   veh_vars = \"veh_type\",   segment_vars = NULL,   process_vars = \"process\" )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize emissions estimates — emis_summary","text":"emi_list list. Emission emission factor list. character. Emissions can aggregated 'time', 'vehicle', simply 'pollutant' (Default). veh_vars character. data.frame names 'emi_list' attributed vehicle characteristics. Default 'veh_type'. segment_vars character. data.frame names 'emi_list' object attributed road segments. Default NULL. process_vars character. data.frame names 'emi_list' object attributed emission processes. Default 'process'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize emissions estimates — emis_summary","text":"data.table pollutants units ('g') aggregated pollutant, time, vehicle type.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize emissions estimates — emis_summary","text":"","code":"# \\donttest{ if (requireNamespace(\"gtfstools\", quietly=TRUE)) {  # read GTFS gtfs_file <- system.file(\"extdata/irl_dub_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)  # Keep a single trip gtfs <- gtfstools::filter_by_trip_id(gtfs                                      , trip_id = c('238.2.60-118-b12-1.59.I'                                                    ,\"7081.2.60-X27-b12-1.106.I\")) # Transport model tp_model <- transport_model(gtfs_data = gtfs,                             spatial_resolution = 100,                             parallel = FALSE)  # fleet data fleet_df <- read.csv(system.file(\"extdata/irl_dub_fleet.txt\"                                  , package = \"gtfs2emis\")) # emission model emi_list <- emission_model(tp_model = tp_model                            , ef_model = \"ef_europe_emep\"                            , fleet_data = fleet_df                            , pollutant = c(\"CO2\",\"PM10\"))  # Aggregate total emissions by 'pollutant' emis_summary(emi_list)   # by vehicle type emis_summary(emi_list, by = \"vehicle\")               emis_summary(emi_list              , by = \"vehicle\"              , veh_vars = c(\"euro\"))  emis_summary(emi_list              , by = \"vehicle\"              , veh_vars = c(\"fuel\"))  emis_summary(emi_list              , by = \"vehicle\"              , veh_vars = c(\"veh_type\",\"euro\",\"tech\",\"fuel\"))               # by time of the day emis_summary(emi_list              , by = \"time\"              , segment_vars = \"slope\")  } #> Converting shapes to sf objects #> Processing the data #> 'CO2' Emission factor not found for 'SCR' Technology and Euro 'IV'. #>  The package assumes missing Technology entry. Please check `data(ef_europe_emep_db)` for available data. #> 'CO2' Emission factor not found for 'DPF+SCR' Technology and Euro 'VI'. #>  The package assumed 'SCR' Technology entry. Please check `data(ef_europe_emep_db)` for available data. #> Loading required namespace: testthat #>    timestamp_hour pollutant     process              emi #>             <int>    <char>      <char>          <units> #> 1:              8       CO2 hot_exhaust 1.076303e+04 [g] #> 2:              9       CO2 hot_exhaust 8.952295e+01 [g] #> 3:              8      PM10 hot_exhaust 3.509064e-01 [g] #> 4:              9      PM10 hot_exhaust 3.022266e-03 [g] # }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_to_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert emission estimates from list to data.table format — emis_to_dt","title":"Convert emission estimates from list to data.table format — emis_to_dt","text":"Read emission estimates generated emission_model emission factor functions (e.g. ef_brazil_cetesb) convert data.table format.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_to_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert emission estimates from list to data.table format — emis_to_dt","text":"","code":"emis_to_dt(   emi_list,   emi_vars = \"emi\",   veh_vars = \"veh_type\",   pol_vars = \"pollutant\",   process_vars = \"process\",   segment_vars = NULL )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_to_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert emission estimates from list to data.table format — emis_to_dt","text":"emi_list list. list emission estimates emi_vars character. data.frame names 'emi_list' object attributed emissions  emission factors. Default 'emi'. veh_vars character. data.frame names 'emi_list' object attributed vehicle characteristics. Default 'veh_type'. pol_vars character. data.frame names 'emi_list' object attributed pollutants. Default 'pollutant'. process_vars character. data.frame names 'emi_list' object attributed emission processes. Default 'process'. segment_vars character. data.frame names 'emi_list' object attributed road segments. Default NULL.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_to_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert emission estimates from list to data.table format — emis_to_dt","text":"data.table.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emis_to_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert emission estimates from list to data.table format — emis_to_dt","text":"","code":"# \\donttest{  if (requireNamespace(\"gtfstools\", quietly=TRUE)) {  # read GTFS gtfs_file <- system.file(\"extdata/bra_cur_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)   # keep a single trip_id to speed up this example gtfs_small <- gtfstools::filter_by_trip_id(gtfs, trip_id =\"4451136\")    # run transport model tp_model <- transport_model(gtfs_data = gtfs_small,                             min_speed = 2,                             max_speed = 80,                             new_speed = 20,                             spatial_resolution = 100,                             parallel = FALSE)  # Example using Brazilian emission model and fleet fleet_data_ef_cetesb <- data.frame(veh_type = \"BUS_URBAN_D\",                                    model_year = 2010:2019,                                    fuel = \"D\",                                    fleet_composition = rep(0.1,10)                                    )                                     emi_list <- emission_model(                 tp_model = tp_model,                 ef_model = \"ef_brazil_cetesb\",                 fleet_data = fleet_data_ef_cetesb,                 pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\")                 )  # convert emission list to data.table dt <- emis_to_dt(emi_list) } #> Converting shapes to sf objects #> Processing the data #> Constant emission factor along the route # }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emission_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission model — emission_model","title":"Emission model — emission_model","text":"Estimate hot-exhaust emissions public transport systems. function must used together transport_model.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emission_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission model — emission_model","text":"","code":"emission_model(   tp_model,   ef_model,   fleet_data,   pollutant,   reference_year = 2020,   process = \"hot_exhaust\",   heightfile = NULL,   parallel = TRUE,   ncores = NULL,   output_path = NULL,   continue = FALSE,   quiet = TRUE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emission_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emission model — emission_model","text":"tp_model sf_linestring object character path sf_linestring objects. tp_model output transport_model, path output files transport_model saved. ef_model character. string indicating emission factor model used. Options include ef_usa_moves, ef_usa_emfac,ef_europe_emep, ,ef_brazil_cetesb, ef_brazil_scaled_euro (scale ef_brazil_cetesb() based ef_scaled_euro()). fleet_data data.frame. data.frame information fleet characteristics. required columns depend ef_model selection. See @examples input. pollutant character. Vector one pollutants estimated. Example: c(\"CO\", \"CO2\", \"PM10\", \"NOx\"). See documentation check pollutants available emission factor model (ef_usa_moves, ef_usa_emfac, ef_europe_emep, ef_brazil_cetesb). reference_year numeric. Year reference considered calculate emissions inventory. Defaults 2020. argument required ef_model parameter ef_usa_moves ef_usa_emfac. process character; Emission process, classified \"hot_exhaust\" (Default), wear processes (identified \"tyre\",\"brake\" /\"road\" wear). Note wear processes available ef_europe_emep selected @param ef_model. Details wear emissions presented emi_europe_emep_wear. heightfile character raster data. raster file height data, filepath, used estimate emissions considering effect street slope. argument used ef_brazil_scaled_euro ef_europe_emep selected. Default NULL. Details provided slope_class_europe_emep. parallel logical. Decides whether function run parallel. Defaults TRUE. ncores integer. Number cores used parallel execution. argument ignored parallel FALSE. Default (NULL) selects total number available cores minus one. output_path character. File path function output exported. NULL (Default), function returns output user. continue logical. Argument can used output_path TRUE, skips processing shape identifiers already saved files. useful continue processing GTFS file stopped reason. Default value FALSE. quiet Logical; Display messages emissions emission factor functions. Default 'TRUE'.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emission_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emission model — emission_model","text":"list emissions estimates NULL output files saved locally output_path.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emission_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Emission model — emission_model","text":"fleet_data must data.frame organized according desired ef_model. required columns organized follows (see @examples real data usage). veh_type: character; Bus type, classified according @param ef_model . ef_emep_europe, use \"Ubus Midi <=15 t\",\"Ubus Std 15 - 18 t\", \"Ubus Artic >18 t\", \"Coaches Std <=18 t\" \"Coaches Artic >18 t\"; ef_usa_moves ef_usa_emfac, use \"BUS_URBAN_D\"; ef_brazil_cetesb, use \"BUS_URBAN_D\", \"BUS_MICRO_D\", \"BUS_COACH_D\" \"BUS_ARTIC_D\". type_name_eu: character; Bus type, used @param ef_model ef_scaled_euro selected. classes can \"Ubus Midi <=15 t\",\"Ubus Std 15 - 18 t\", \"Ubus Artic >18 t\", \"Coaches Std <=18 t\" \"Coaches Artic >18 t\". reference_year: character; Base year emission factor model input. Required  ef_usa_moves ef_usa_emfac selected. tech: character; treatment technology. required emep_europe selected. Check ?ef_emep_europe details. euro: character; Euro period vehicle, classified \"Conventional\", \"\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"EEV\". required ef_emep_europe selected. Check ef_europe_emep details. fuel: character; Required ef_usa_moves, ef_usa_emfac ef_europe_emep selected. fleet_composition: Numeric. Scaled composition fleet. cases, user might know vehicles run specific routes. composition used attribute probability specific vehicle circulate line. probability sums one. Required emission factors selection. Users can check gtfs2emis fleet data vignette, examples. Based input height data, function returns slope class two consecutive bus stop positions LineString Simple Feature (transport model object). slope given ratio height difference network distance two consecutive public transport stops. function classifies slope one seven categories available European Environmental Agency (EEA) database, -0.06, -0.04,-0.02, 0.00, 0.02, 0.04, 0.06.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/emission_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emission model — emission_model","text":"","code":"# \\donttest{  if (requireNamespace(\"gtfstools\", quietly=TRUE)) {  # read GTFS gtfs_file <- system.file(\"extdata/bra_cur_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)   # keep a single trip_id to speed up this example gtfs_small <- gtfstools::filter_by_trip_id(gtfs, trip_id =\"4451136\")    # run transport model tp_model <- transport_model(gtfs_data = gtfs_small,                             min_speed = 2,                             max_speed = 80,                             new_speed = 20,                             spatial_resolution = 100,                             parallel = FALSE)  # Example using Brazilian emission model and fleet fleet_data_ef_cetesb <- data.frame(veh_type = \"BUS_URBAN_D\",                                    model_year = 2010:2019,                                    fuel = \"D\",                                    fleet_composition = rep(0.1,10)                                    )                                     emi_cetesb <- progressr::with_progress(emission_model(                 tp_model = tp_model,                 ef_model = \"ef_brazil_cetesb\",                 fleet_data = fleet_data_ef_cetesb,                 pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\")                 ))                              # Example using European emission model and fleet fleet_data_ef_europe <- data.frame(  veh_type = c(\"Ubus Midi <=15 t\",                                                   \"Ubus Std 15 - 18 t\",                                                   \"Ubus Artic >18 t\")                                    , euro = c(\"III\",\"IV\",\"V\")                                    , fuel = rep(\"D\",3)                                    , tech = c(\"-\",\"SCR\",\"SCR\")                                    , fleet_composition = c(0.4,0.5,0.1))                                     emi_emep <- progressr::with_progress(emission_model(tp_model = tp_model                           , ef_model = \"ef_europe_emep\"                           , fleet_data = fleet_data_ef_europe                           , pollutant = c(\"PM10\",\"NOx\"))) emi_emep_wear <- progressr::with_progress(emission_model(tp_model = tp_model                           , ef_model = \"ef_europe_emep\"                           , fleet_data = fleet_data_ef_europe                           , pollutant = \"PM10\"                           , process = c(\"tyre\",\"road\",\"brake\"))) raster_cur <- system.file(\"extdata/bra_cur-srtm.tif\", package = \"gtfs2emis\")                            emi_emep_slope <- progressr::with_progress(emission_model(tp_model = tp_model                           , ef_model = \"ef_europe_emep\"                           , fleet_data = fleet_data_ef_europe                           , heightfile = raster_cur                           , pollutant = c(\"PM10\",\"NOx\")))                                                      # Example using US EMFAC emission model and fleet fleet_data_ef_moves <- data.frame(  veh_type = \"BUS_URBAN_D\"                                   , model_year = 2010:2019                                   , fuel = \"D\"                                   , reference_year = 2020                                   , fleet_composition = rep(0.1,10))                                    fleet_data_ef_emfac <- data.frame(  veh_type =  \"BUS_URBAN_D\"                                   , model_year = 2010:2019                                   , fuel = \"D\"                                   , reference_year = 2020                                   , fleet_composition = rep(0.1,10))                                    # Example using US MOVES emission model and fleet emi_moves <- emission_model(tp_model = tp_model                           , ef_model = \"ef_usa_moves\"                           , fleet_data = fleet_data_ef_moves                           , pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\")                           , reference_year = 2020)                            emi_emfac <- emission_model(tp_model = tp_model                           , ef_model = \"ef_usa_emfac\"                           , fleet_data = fleet_data_ef_emfac                           , pollutant = c(\"CO\",\"PM10\",\"CO2\",\"CH4\",\"NOx\")                           , reference_year = 2020) } #> Converting shapes to sf objects #> Processing the data #> Constant emission factor along the route # }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/fuel_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Correction factor equation — fuel_correction","title":"Correction factor equation — fuel_correction","text":"Relations emissions fuel properties diesel heavy-duty vehicles based EMEP/EEA. Function based values EMEP/EEA air pollutant emission inventory guidebook 2019. Estimates given ratio correction factor improved fuel correction factor base fuel.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/fuel_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correction factor equation — fuel_correction","text":"","code":"fuel_correction(   pollutant,   euro_stage,   improved_fuel = c(den = 835, s = 40, pah = 5, cn = 53, t95 = 320) )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/fuel_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correction factor equation — fuel_correction","text":"pollutant character. Pollutant classified \"CO\", \"VOC\", \"NOx\" \"PM10\". euro_stage character. EURO period vehicle, classified \"PRE\", \"\", \"II\", \"III\", \"IV\", \"V\" \"VI\". improved_fuel numeric. Numeric vector characteristics improved fuel, ordered : den (Density 15 degrees C), s (Sulphur content ppm), pah (Polycyclic aromatics content \\ number), t95 (Back end distillation degrees C). Default input uses c(den = 835, s = 40, pah = 5, cn = 53, t95 = 320).","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/fuel_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correction factor equation — fuel_correction","text":"numeric. fuel correction factor.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/multiply_ef.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply emission factors by distances — multiply_ef","title":"Multiply emission factors by distances — multiply_ef","text":"Calculate hot exhaust emissions multiplying emission factors distances weighted fleet composition profile.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/multiply_ef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply emission factors by distances — multiply_ef","text":"","code":"multiply_ef(   fleet_composition,   dist,   ef,   aggregate = TRUE,   prefix = NULL,   as_list = TRUE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/multiply_ef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply emission factors by distances — multiply_ef","text":"fleet_composition vector; Fleet composition, distribution fleet based frequency. one, 'fleet_composition' 1.0. dist units ('km'); Length link km. ef list data.table;    Emission factors. aggregate logical; TRUE (default) emissions aggregated pollutant. prefix character; Add prefix emissions names. Missing parameter (default) means empty prefix. as_list logical. TRUE (default), function returns output list format. FALSE, output returned data.table format.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/multiply_ef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply emission factors by distances — multiply_ef","text":"units ('g'); emissions per link.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/slope_class_europe_emep.html","id":null,"dir":"Reference","previous_headings":"","what":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","title":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","text":"Based input height data, function returns slope class two consecutive bus stop positions LineString Simple Feature (transport model object). slope given ratio height difference network distance two consecutive public transport stops. function classifies slope one seven categories available European Environmental Agency (EEA) database, -0.06, -0.04,-0.02, 0.00, 0.02, 0.04, 0.06. classifications described @details .","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/slope_class_europe_emep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","text":"","code":"slope_class_europe_emep(tp_model, heightfile, keep = FALSE)"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/slope_class_europe_emep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","text":"tp_model LineString Simple Feature; transport model output. heightfile character raster data; raster file height data, filepath. keep logical. Whether columns related height slope consecutive bus stops kept dropped (defaults FALSE, keeps slope classification).","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/slope_class_europe_emep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","text":"transport model slope information.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/slope_class_europe_emep.html","id":"slopes-classification-","dir":"Reference","previous_headings":"","what":"Slopes classification:","title":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","text":"|  slope interval              |  slope class | | slope <= -0.070                  |        -0.06     | | slope > -0.070 & slope <= -0.050 |        -0.06     | | slope > -0.050 & slope <= -0.030 |        -0.04     | | slope > -0.030 & slope <= -0.010 |        -0.02     | | slope > -0.010 & slope <= +0.010 |        +0.00     | | slope > +0.010 & slope <= +0.030 |        +0.02     | | slope > +0.030 & slope <= +0.050 |        +0.04     | | slope > +0.050 & slope <= +0.070 |        +0.06     | | slope > +0.070                   |        -0.06     |","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/slope_class_europe_emep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add slope class into the transport model (LineString Simple Feature object) — slope_class_europe_emep","text":"","code":"# \\donttest{  if (requireNamespace(\"gtfstools\", quietly=TRUE)) { gtfs_file <- system.file(\"extdata/bra_cur_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)   # keep a single trip_id to speed up this example gtfs_small <- gtfstools::filter_by_trip_id(gtfs, trip_id =\"4451136\")    # run transport model tp_model <- transport_model(gtfs_data = gtfs_small,                             min_speed = 2,                             max_speed = 80,                             new_speed = 20,                             spatial_resolution = 100,                             parallel = FALSE)  # read raster file raster_cur <- system.file(\"extdata/bra_cur-srtm.tif\", package = \"gtfs2emis\")  tp_model_slope <- slope_class_europe_emep(tp_model,raster_cur) } #> Converting shapes to sf objects #> Processing the data # }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/transport_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Transport model — transport_model","title":"Transport model — transport_model","text":"function converts public transport data set GTFS format GPS-like table space-time positions speeds public transport vehicles. function also allow users set spatial resolution output adjust speed public transport vehicles given min_speed max_speed range.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/transport_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transport model — transport_model","text":"","code":"transport_model(   gtfs_data,   min_speed = 2,   max_speed = 80,   new_speed = NULL,   parallel = TRUE,   ncores = NULL,   spatial_resolution = 100,   output_path = NULL,   continue = FALSE )"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/transport_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transport model — transport_model","text":"gtfs_data path GTFS file GTFS data organized list data.tables created gtfstools::read_gtfs(). min_speed numeric (km/h) speed units value. Minimum speed considered valid. Values minimum speed updated according new_speed parameter, can affect arrival  departure times vehicles  transit stops. Defaults 2 km/h. max_speed numeric (km/h) speed units value. Maximum speed considered valid. Values maximum speed  updated according new_speed parameter, can affect arrival departure times vehicles transit stops. Defaults 80 km/h. new_speed numeric (km/h) speed units value. Speed value used replace speeds fall outside min_speed max_speed range missing GTFS input. new_speed = NULL (default), function uses average speed entire GTFS data feed. parallel logical. Decides whether function run parallel. Defaults TRUE. ncores integer. Number cores used parallel execution. argument ignored parallel FALSE. Default (NULL) selects total number available cores minus one. spatial_resolution spatial resolution meters. Defaults 100. function creates points order guarantee minimum distance two consecutive points spatial_resolution value. given GTFS shape_id two consecutive points distance smaller spatial resolution, algorithm remove points. output_path character. directory path. NULL (Default), function returns output. user passes valid passed, output saved output_path dir. Note output public transport shape_id saved separately different files. Setting output_path recommended working large public transport system output function can significantly large. continue logical. Argument can used output_path TRUE, skips processing shape identifiers already saved files. useful continue processing GTFS file stopped reason. Default value FALSE.","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/transport_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transport model — transport_model","text":"data.table sf_linestring object NULL.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfs2emis/dev/reference/transport_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transport model — transport_model","text":"","code":"# \\donttest{ if (requireNamespace(\"gtfstools\", quietly=TRUE)) {  # read GTFS gtfs_file <- system.file(\"extdata/bra_cur_gtfs.zip\", package = \"gtfs2emis\") gtfs <- gtfstools::read_gtfs(gtfs_file)   # keep a single trip_id to speed up this example gtfs_small <- gtfstools::filter_by_trip_id(gtfs, trip_id =\"4451136\")    # run transport model tp_model <- transport_model(gtfs_data = gtfs_small,                             min_speed = 2,                             max_speed = 80,                             new_speed = 20,                             spatial_resolution = 100,                             parallel = FALSE)   } #> Converting shapes to sf objects #> Processing the data # }"},{"path":"https://ipeagit.github.io/gtfs2emis/dev/news/index.html","id":"gtfs2emis-011","dir":"Changelog","previous_headings":"","what":"gtfs2emis 0.1.1","title":"gtfs2emis 0.1.1","text":"CRAN release: 2024-12-02 New function emi_europe_emep_wear(), estimate non-exhaust sources transit buses EMEP model (detailed vignette non-exhaust) Adjust functions emi_summary(), emis_grid(), emission_model incorporate non-exhaust emissions estimates","code":""},{"path":"https://ipeagit.github.io/gtfs2emis/dev/news/index.html","id":"gtfs2emis-010","dir":"Changelog","previous_headings":"","what":"gtfs2emis 0.1.0","title":"gtfs2emis 0.1.0","text":"CRAN release: 2022-11-14 Initial CRAN release.","code":""}]
